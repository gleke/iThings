// Code generated by goctl. DO NOT EDIT.
// Source: stock.proto

package stockclient

import (
	"context"

	"github.com/i-Things/things/src/stocksvr/internal/svc"
	"github.com/i-Things/things/src/stocksvr/types/pb/stock"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ReqSendMsg                         = stock.ReqSendMsg
	ReqStockLocationCreate             = stock.ReqStockLocationCreate
	ReqStockLocationDelete             = stock.ReqStockLocationDelete
	ReqStockLocationList               = stock.ReqStockLocationList
	ReqStockLocationUpdate             = stock.ReqStockLocationUpdate
	ReqStockMoveBatchCreate            = stock.ReqStockMoveBatchCreate
	ReqStockMoveBatchDelete            = stock.ReqStockMoveBatchDelete
	ReqStockMoveBatchUpdate            = stock.ReqStockMoveBatchUpdate
	ReqStockMoveCreate                 = stock.ReqStockMoveCreate
	ReqStockMoveDelete                 = stock.ReqStockMoveDelete
	ReqStockMoveList                   = stock.ReqStockMoveList
	ReqStockMoveUpdate                 = stock.ReqStockMoveUpdate
	ReqStockMoveUpdateAutomaticPartial = stock.ReqStockMoveUpdateAutomaticPartial
	ReqStockMoveUpdatePartial          = stock.ReqStockMoveUpdatePartial
	ReqStockMoveView                   = stock.ReqStockMoveView
	ResSendMsg                         = stock.ResSendMsg
	ResStockLocationCreate             = stock.ResStockLocationCreate
	ResStockLocationDelete             = stock.ResStockLocationDelete
	ResStockLocationList               = stock.ResStockLocationList
	ResStockLocationUpdate             = stock.ResStockLocationUpdate
	ResStockMoveBatchCreate            = stock.ResStockMoveBatchCreate
	ResStockMoveBatchDelete            = stock.ResStockMoveBatchDelete
	ResStockMoveBatchUpdate            = stock.ResStockMoveBatchUpdate
	ResStockMoveCreate                 = stock.ResStockMoveCreate
	ResStockMoveDelete                 = stock.ResStockMoveDelete
	ResStockMoveList                   = stock.ResStockMoveList
	ResStockMoveUpdate                 = stock.ResStockMoveUpdate
	ResStockMoveUpdateAutomaticPartial = stock.ResStockMoveUpdateAutomaticPartial
	ResStockMoveUpdatePartial          = stock.ResStockMoveUpdatePartial
	ResStockMoveView                   = stock.ResStockMoveView
	StockLocationItem                  = stock.StockLocationItem
	StockMoveBatchCreateItem           = stock.StockMoveBatchCreateItem
	StockMoveItem                      = stock.StockMoveItem
	TenantUpdateAutomatic              = stock.TenantUpdateAutomatic

	Stock interface {
		StockLocationCreate(ctx context.Context, in *ReqStockLocationCreate, opts ...grpc.CallOption) (*ResStockLocationCreate, error)
		StockLocationUpdate(ctx context.Context, in *ReqStockLocationUpdate, opts ...grpc.CallOption) (*ResStockLocationUpdate, error)
		StockLocationDelete(ctx context.Context, in *ReqStockLocationDelete, opts ...grpc.CallOption) (*ResStockLocationDelete, error)
		StockLocationList(ctx context.Context, in *ReqStockLocationList, opts ...grpc.CallOption) (*ResStockLocationList, error)
		StockMoveCreate(ctx context.Context, in *ReqStockMoveCreate, opts ...grpc.CallOption) (*ResStockMoveCreate, error)
		StockMoveUpdate(ctx context.Context, in *ReqStockMoveUpdate, opts ...grpc.CallOption) (*ResStockMoveUpdate, error)
		StockMoveDelete(ctx context.Context, in *ReqStockMoveDelete, opts ...grpc.CallOption) (*ResStockMoveDelete, error)
		StockMoveList(ctx context.Context, in *ReqStockMoveList, opts ...grpc.CallOption) (*ResStockMoveList, error)
		StockMoveView(ctx context.Context, in *ReqStockMoveView, opts ...grpc.CallOption) (*ResStockMoveView, error)
		StockMoveBatchCreate(ctx context.Context, in *ReqStockMoveBatchCreate, opts ...grpc.CallOption) (*ResStockMoveBatchCreate, error)
		StockMoveBatchUpdate(ctx context.Context, in *ReqStockMoveBatchUpdate, opts ...grpc.CallOption) (*ResStockMoveBatchUpdate, error)
		StockMoveBatchDelete(ctx context.Context, in *ReqStockMoveBatchDelete, opts ...grpc.CallOption) (*ResStockMoveBatchDelete, error)
		StockMoveUpdatePartial(ctx context.Context, in *ReqStockMoveUpdatePartial, opts ...grpc.CallOption) (*ResStockMoveUpdatePartial, error)
		StockMoveUpdateAutomaticPartial(ctx context.Context, in *ReqStockMoveUpdateAutomaticPartial, opts ...grpc.CallOption) (*ResStockMoveUpdateAutomaticPartial, error)
		SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*ResSendMsg, error)
	}

	defaultStock struct {
		cli zrpc.Client
	}

	directStock struct {
		svcCtx *svc.ServiceContext
		svr    stock.StockServer
	}
)

func NewStock(cli zrpc.Client) Stock {
	return &defaultStock{
		cli: cli,
	}
}

func NewDirectStock(svcCtx *svc.ServiceContext, svr stock.StockServer) Stock {
	return &directStock{
		svr:    svr,
		svcCtx: svcCtx,
	}
}

func (m *defaultStock) StockLocationCreate(ctx context.Context, in *ReqStockLocationCreate, opts ...grpc.CallOption) (*ResStockLocationCreate, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockLocationCreate(ctx, in, opts...)
}

func (d *directStock) StockLocationCreate(ctx context.Context, in *ReqStockLocationCreate, opts ...grpc.CallOption) (*ResStockLocationCreate, error) {
	return d.svr.StockLocationCreate(ctx, in)
}

func (m *defaultStock) StockLocationUpdate(ctx context.Context, in *ReqStockLocationUpdate, opts ...grpc.CallOption) (*ResStockLocationUpdate, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockLocationUpdate(ctx, in, opts...)
}

func (d *directStock) StockLocationUpdate(ctx context.Context, in *ReqStockLocationUpdate, opts ...grpc.CallOption) (*ResStockLocationUpdate, error) {
	return d.svr.StockLocationUpdate(ctx, in)
}

func (m *defaultStock) StockLocationDelete(ctx context.Context, in *ReqStockLocationDelete, opts ...grpc.CallOption) (*ResStockLocationDelete, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockLocationDelete(ctx, in, opts...)
}

func (d *directStock) StockLocationDelete(ctx context.Context, in *ReqStockLocationDelete, opts ...grpc.CallOption) (*ResStockLocationDelete, error) {
	return d.svr.StockLocationDelete(ctx, in)
}

func (m *defaultStock) StockLocationList(ctx context.Context, in *ReqStockLocationList, opts ...grpc.CallOption) (*ResStockLocationList, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockLocationList(ctx, in, opts...)
}

func (d *directStock) StockLocationList(ctx context.Context, in *ReqStockLocationList, opts ...grpc.CallOption) (*ResStockLocationList, error) {
	return d.svr.StockLocationList(ctx, in)
}

func (m *defaultStock) StockMoveCreate(ctx context.Context, in *ReqStockMoveCreate, opts ...grpc.CallOption) (*ResStockMoveCreate, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveCreate(ctx, in, opts...)
}

func (d *directStock) StockMoveCreate(ctx context.Context, in *ReqStockMoveCreate, opts ...grpc.CallOption) (*ResStockMoveCreate, error) {
	return d.svr.StockMoveCreate(ctx, in)
}

func (m *defaultStock) StockMoveUpdate(ctx context.Context, in *ReqStockMoveUpdate, opts ...grpc.CallOption) (*ResStockMoveUpdate, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveUpdate(ctx, in, opts...)
}

func (d *directStock) StockMoveUpdate(ctx context.Context, in *ReqStockMoveUpdate, opts ...grpc.CallOption) (*ResStockMoveUpdate, error) {
	return d.svr.StockMoveUpdate(ctx, in)
}

func (m *defaultStock) StockMoveDelete(ctx context.Context, in *ReqStockMoveDelete, opts ...grpc.CallOption) (*ResStockMoveDelete, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveDelete(ctx, in, opts...)
}

func (d *directStock) StockMoveDelete(ctx context.Context, in *ReqStockMoveDelete, opts ...grpc.CallOption) (*ResStockMoveDelete, error) {
	return d.svr.StockMoveDelete(ctx, in)
}

func (m *defaultStock) StockMoveList(ctx context.Context, in *ReqStockMoveList, opts ...grpc.CallOption) (*ResStockMoveList, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveList(ctx, in, opts...)
}

func (d *directStock) StockMoveList(ctx context.Context, in *ReqStockMoveList, opts ...grpc.CallOption) (*ResStockMoveList, error) {
	return d.svr.StockMoveList(ctx, in)
}

func (m *defaultStock) StockMoveView(ctx context.Context, in *ReqStockMoveView, opts ...grpc.CallOption) (*ResStockMoveView, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveView(ctx, in, opts...)
}

func (d *directStock) StockMoveView(ctx context.Context, in *ReqStockMoveView, opts ...grpc.CallOption) (*ResStockMoveView, error) {
	return d.svr.StockMoveView(ctx, in)
}

func (m *defaultStock) StockMoveBatchCreate(ctx context.Context, in *ReqStockMoveBatchCreate, opts ...grpc.CallOption) (*ResStockMoveBatchCreate, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveBatchCreate(ctx, in, opts...)
}

func (d *directStock) StockMoveBatchCreate(ctx context.Context, in *ReqStockMoveBatchCreate, opts ...grpc.CallOption) (*ResStockMoveBatchCreate, error) {
	return d.svr.StockMoveBatchCreate(ctx, in)
}

func (m *defaultStock) StockMoveBatchUpdate(ctx context.Context, in *ReqStockMoveBatchUpdate, opts ...grpc.CallOption) (*ResStockMoveBatchUpdate, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveBatchUpdate(ctx, in, opts...)
}

func (d *directStock) StockMoveBatchUpdate(ctx context.Context, in *ReqStockMoveBatchUpdate, opts ...grpc.CallOption) (*ResStockMoveBatchUpdate, error) {
	return d.svr.StockMoveBatchUpdate(ctx, in)
}

func (m *defaultStock) StockMoveBatchDelete(ctx context.Context, in *ReqStockMoveBatchDelete, opts ...grpc.CallOption) (*ResStockMoveBatchDelete, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveBatchDelete(ctx, in, opts...)
}

func (d *directStock) StockMoveBatchDelete(ctx context.Context, in *ReqStockMoveBatchDelete, opts ...grpc.CallOption) (*ResStockMoveBatchDelete, error) {
	return d.svr.StockMoveBatchDelete(ctx, in)
}

func (m *defaultStock) StockMoveUpdatePartial(ctx context.Context, in *ReqStockMoveUpdatePartial, opts ...grpc.CallOption) (*ResStockMoveUpdatePartial, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveUpdatePartial(ctx, in, opts...)
}

func (d *directStock) StockMoveUpdatePartial(ctx context.Context, in *ReqStockMoveUpdatePartial, opts ...grpc.CallOption) (*ResStockMoveUpdatePartial, error) {
	return d.svr.StockMoveUpdatePartial(ctx, in)
}

func (m *defaultStock) StockMoveUpdateAutomaticPartial(ctx context.Context, in *ReqStockMoveUpdateAutomaticPartial, opts ...grpc.CallOption) (*ResStockMoveUpdateAutomaticPartial, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.StockMoveUpdateAutomaticPartial(ctx, in, opts...)
}

func (d *directStock) StockMoveUpdateAutomaticPartial(ctx context.Context, in *ReqStockMoveUpdateAutomaticPartial, opts ...grpc.CallOption) (*ResStockMoveUpdateAutomaticPartial, error) {
	return d.svr.StockMoveUpdateAutomaticPartial(ctx, in)
}

func (m *defaultStock) SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*ResSendMsg, error) {
	client := stock.NewStockClient(m.cli.Conn())
	return client.SendMsg(ctx, in, opts...)
}

func (d *directStock) SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*ResSendMsg, error) {
	return d.svr.SendMsg(ctx, in)
}
