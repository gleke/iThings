// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/stock.proto

package stock

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StockClient is the client API for Stock service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockClient interface {
	StockLocationCreate(ctx context.Context, in *ReqStockLocationCreate, opts ...grpc.CallOption) (*ResStockLocationCreate, error)
	StockLocationUpdate(ctx context.Context, in *ReqStockLocationUpdate, opts ...grpc.CallOption) (*ResStockLocationUpdate, error)
	StockLocationDelete(ctx context.Context, in *ReqStockLocationDelete, opts ...grpc.CallOption) (*ResStockLocationDelete, error)
	StockLocationList(ctx context.Context, in *ReqStockLocationList, opts ...grpc.CallOption) (*ResStockLocationList, error)
	StockMoveCreate(ctx context.Context, in *ReqStockMoveCreate, opts ...grpc.CallOption) (*ResStockMoveCreate, error)
	StockMoveUpdate(ctx context.Context, in *ReqStockMoveUpdate, opts ...grpc.CallOption) (*ResStockMoveUpdate, error)
	StockMoveDelete(ctx context.Context, in *ReqStockMoveDelete, opts ...grpc.CallOption) (*ResStockMoveDelete, error)
	StockMoveList(ctx context.Context, in *ReqStockMoveList, opts ...grpc.CallOption) (*ResStockMoveList, error)
	StockMoveView(ctx context.Context, in *ReqStockMoveView, opts ...grpc.CallOption) (*ResStockMoveView, error)
	StockMoveBatchCreate(ctx context.Context, in *ReqStockMoveBatchCreate, opts ...grpc.CallOption) (*ResStockMoveBatchCreate, error)
	StockMoveBatchUpdate(ctx context.Context, in *ReqStockMoveBatchUpdate, opts ...grpc.CallOption) (*ResStockMoveBatchUpdate, error)
	StockMoveBatchDelete(ctx context.Context, in *ReqStockMoveBatchDelete, opts ...grpc.CallOption) (*ResStockMoveBatchDelete, error)
	StockMoveUpdatePartial(ctx context.Context, in *ReqStockMoveUpdatePartial, opts ...grpc.CallOption) (*ResStockMoveUpdatePartial, error)
	StockMoveUpdateAutomaticPartial(ctx context.Context, in *ReqStockMoveUpdateAutomaticPartial, opts ...grpc.CallOption) (*ResStockMoveUpdateAutomaticPartial, error)
	SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*ResSendMsg, error)
}

type stockClient struct {
	cc grpc.ClientConnInterface
}

func NewStockClient(cc grpc.ClientConnInterface) StockClient {
	return &stockClient{cc}
}

func (c *stockClient) StockLocationCreate(ctx context.Context, in *ReqStockLocationCreate, opts ...grpc.CallOption) (*ResStockLocationCreate, error) {
	out := new(ResStockLocationCreate)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockLocationCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockLocationUpdate(ctx context.Context, in *ReqStockLocationUpdate, opts ...grpc.CallOption) (*ResStockLocationUpdate, error) {
	out := new(ResStockLocationUpdate)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockLocationUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockLocationDelete(ctx context.Context, in *ReqStockLocationDelete, opts ...grpc.CallOption) (*ResStockLocationDelete, error) {
	out := new(ResStockLocationDelete)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockLocationDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockLocationList(ctx context.Context, in *ReqStockLocationList, opts ...grpc.CallOption) (*ResStockLocationList, error) {
	out := new(ResStockLocationList)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockLocationList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveCreate(ctx context.Context, in *ReqStockMoveCreate, opts ...grpc.CallOption) (*ResStockMoveCreate, error) {
	out := new(ResStockMoveCreate)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveUpdate(ctx context.Context, in *ReqStockMoveUpdate, opts ...grpc.CallOption) (*ResStockMoveUpdate, error) {
	out := new(ResStockMoveUpdate)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveDelete(ctx context.Context, in *ReqStockMoveDelete, opts ...grpc.CallOption) (*ResStockMoveDelete, error) {
	out := new(ResStockMoveDelete)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveList(ctx context.Context, in *ReqStockMoveList, opts ...grpc.CallOption) (*ResStockMoveList, error) {
	out := new(ResStockMoveList)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveView(ctx context.Context, in *ReqStockMoveView, opts ...grpc.CallOption) (*ResStockMoveView, error) {
	out := new(ResStockMoveView)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveBatchCreate(ctx context.Context, in *ReqStockMoveBatchCreate, opts ...grpc.CallOption) (*ResStockMoveBatchCreate, error) {
	out := new(ResStockMoveBatchCreate)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveBatchCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveBatchUpdate(ctx context.Context, in *ReqStockMoveBatchUpdate, opts ...grpc.CallOption) (*ResStockMoveBatchUpdate, error) {
	out := new(ResStockMoveBatchUpdate)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveBatchUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveBatchDelete(ctx context.Context, in *ReqStockMoveBatchDelete, opts ...grpc.CallOption) (*ResStockMoveBatchDelete, error) {
	out := new(ResStockMoveBatchDelete)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveBatchDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveUpdatePartial(ctx context.Context, in *ReqStockMoveUpdatePartial, opts ...grpc.CallOption) (*ResStockMoveUpdatePartial, error) {
	out := new(ResStockMoveUpdatePartial)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveUpdatePartial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) StockMoveUpdateAutomaticPartial(ctx context.Context, in *ReqStockMoveUpdateAutomaticPartial, opts ...grpc.CallOption) (*ResStockMoveUpdateAutomaticPartial, error) {
	out := new(ResStockMoveUpdateAutomaticPartial)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/StockMoveUpdateAutomaticPartial", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockClient) SendMsg(ctx context.Context, in *ReqSendMsg, opts ...grpc.CallOption) (*ResSendMsg, error) {
	out := new(ResSendMsg)
	err := c.cc.Invoke(ctx, "/stocksvr.stock/SendMsg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StockServer is the server API for Stock service.
// All implementations must embed UnimplementedStockServer
// for forward compatibility
type StockServer interface {
	StockLocationCreate(context.Context, *ReqStockLocationCreate) (*ResStockLocationCreate, error)
	StockLocationUpdate(context.Context, *ReqStockLocationUpdate) (*ResStockLocationUpdate, error)
	StockLocationDelete(context.Context, *ReqStockLocationDelete) (*ResStockLocationDelete, error)
	StockLocationList(context.Context, *ReqStockLocationList) (*ResStockLocationList, error)
	StockMoveCreate(context.Context, *ReqStockMoveCreate) (*ResStockMoveCreate, error)
	StockMoveUpdate(context.Context, *ReqStockMoveUpdate) (*ResStockMoveUpdate, error)
	StockMoveDelete(context.Context, *ReqStockMoveDelete) (*ResStockMoveDelete, error)
	StockMoveList(context.Context, *ReqStockMoveList) (*ResStockMoveList, error)
	StockMoveView(context.Context, *ReqStockMoveView) (*ResStockMoveView, error)
	StockMoveBatchCreate(context.Context, *ReqStockMoveBatchCreate) (*ResStockMoveBatchCreate, error)
	StockMoveBatchUpdate(context.Context, *ReqStockMoveBatchUpdate) (*ResStockMoveBatchUpdate, error)
	StockMoveBatchDelete(context.Context, *ReqStockMoveBatchDelete) (*ResStockMoveBatchDelete, error)
	StockMoveUpdatePartial(context.Context, *ReqStockMoveUpdatePartial) (*ResStockMoveUpdatePartial, error)
	StockMoveUpdateAutomaticPartial(context.Context, *ReqStockMoveUpdateAutomaticPartial) (*ResStockMoveUpdateAutomaticPartial, error)
	SendMsg(context.Context, *ReqSendMsg) (*ResSendMsg, error)
	mustEmbedUnimplementedStockServer()
}

// UnimplementedStockServer must be embedded to have forward compatible implementations.
type UnimplementedStockServer struct {
}

func (UnimplementedStockServer) StockLocationCreate(context.Context, *ReqStockLocationCreate) (*ResStockLocationCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockLocationCreate not implemented")
}
func (UnimplementedStockServer) StockLocationUpdate(context.Context, *ReqStockLocationUpdate) (*ResStockLocationUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockLocationUpdate not implemented")
}
func (UnimplementedStockServer) StockLocationDelete(context.Context, *ReqStockLocationDelete) (*ResStockLocationDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockLocationDelete not implemented")
}
func (UnimplementedStockServer) StockLocationList(context.Context, *ReqStockLocationList) (*ResStockLocationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockLocationList not implemented")
}
func (UnimplementedStockServer) StockMoveCreate(context.Context, *ReqStockMoveCreate) (*ResStockMoveCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveCreate not implemented")
}
func (UnimplementedStockServer) StockMoveUpdate(context.Context, *ReqStockMoveUpdate) (*ResStockMoveUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveUpdate not implemented")
}
func (UnimplementedStockServer) StockMoveDelete(context.Context, *ReqStockMoveDelete) (*ResStockMoveDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveDelete not implemented")
}
func (UnimplementedStockServer) StockMoveList(context.Context, *ReqStockMoveList) (*ResStockMoveList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveList not implemented")
}
func (UnimplementedStockServer) StockMoveView(context.Context, *ReqStockMoveView) (*ResStockMoveView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveView not implemented")
}
func (UnimplementedStockServer) StockMoveBatchCreate(context.Context, *ReqStockMoveBatchCreate) (*ResStockMoveBatchCreate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveBatchCreate not implemented")
}
func (UnimplementedStockServer) StockMoveBatchUpdate(context.Context, *ReqStockMoveBatchUpdate) (*ResStockMoveBatchUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveBatchUpdate not implemented")
}
func (UnimplementedStockServer) StockMoveBatchDelete(context.Context, *ReqStockMoveBatchDelete) (*ResStockMoveBatchDelete, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveBatchDelete not implemented")
}
func (UnimplementedStockServer) StockMoveUpdatePartial(context.Context, *ReqStockMoveUpdatePartial) (*ResStockMoveUpdatePartial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveUpdatePartial not implemented")
}
func (UnimplementedStockServer) StockMoveUpdateAutomaticPartial(context.Context, *ReqStockMoveUpdateAutomaticPartial) (*ResStockMoveUpdateAutomaticPartial, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StockMoveUpdateAutomaticPartial not implemented")
}
func (UnimplementedStockServer) SendMsg(context.Context, *ReqSendMsg) (*ResSendMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMsg not implemented")
}
func (UnimplementedStockServer) mustEmbedUnimplementedStockServer() {}

// UnsafeStockServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockServer will
// result in compilation errors.
type UnsafeStockServer interface {
	mustEmbedUnimplementedStockServer()
}

func RegisterStockServer(s grpc.ServiceRegistrar, srv StockServer) {
	s.RegisterService(&Stock_ServiceDesc, srv)
}

func _Stock_StockLocationCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockLocationCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockLocationCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockLocationCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockLocationCreate(ctx, req.(*ReqStockLocationCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockLocationUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockLocationUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockLocationUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockLocationUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockLocationUpdate(ctx, req.(*ReqStockLocationUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockLocationDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockLocationDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockLocationDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockLocationDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockLocationDelete(ctx, req.(*ReqStockLocationDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockLocationList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockLocationList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockLocationList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockLocationList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockLocationList(ctx, req.(*ReqStockLocationList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveCreate(ctx, req.(*ReqStockMoveCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveUpdate(ctx, req.(*ReqStockMoveUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveDelete(ctx, req.(*ReqStockMoveDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveList(ctx, req.(*ReqStockMoveList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveView)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveView(ctx, req.(*ReqStockMoveView))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveBatchCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveBatchCreate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveBatchCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveBatchCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveBatchCreate(ctx, req.(*ReqStockMoveBatchCreate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveBatchUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveBatchUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveBatchUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveBatchUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveBatchUpdate(ctx, req.(*ReqStockMoveBatchUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveBatchDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveBatchDelete)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveBatchDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveBatchDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveBatchDelete(ctx, req.(*ReqStockMoveBatchDelete))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveUpdatePartial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveUpdatePartial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveUpdatePartial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveUpdatePartial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveUpdatePartial(ctx, req.(*ReqStockMoveUpdatePartial))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_StockMoveUpdateAutomaticPartial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqStockMoveUpdateAutomaticPartial)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).StockMoveUpdateAutomaticPartial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/StockMoveUpdateAutomaticPartial",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).StockMoveUpdateAutomaticPartial(ctx, req.(*ReqStockMoveUpdateAutomaticPartial))
	}
	return interceptor(ctx, in, info, handler)
}

func _Stock_SendMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqSendMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockServer).SendMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stocksvr.stock/SendMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockServer).SendMsg(ctx, req.(*ReqSendMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// Stock_ServiceDesc is the grpc.ServiceDesc for Stock service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stock_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stocksvr.stock",
	HandlerType: (*StockServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StockLocationCreate",
			Handler:    _Stock_StockLocationCreate_Handler,
		},
		{
			MethodName: "StockLocationUpdate",
			Handler:    _Stock_StockLocationUpdate_Handler,
		},
		{
			MethodName: "StockLocationDelete",
			Handler:    _Stock_StockLocationDelete_Handler,
		},
		{
			MethodName: "StockLocationList",
			Handler:    _Stock_StockLocationList_Handler,
		},
		{
			MethodName: "StockMoveCreate",
			Handler:    _Stock_StockMoveCreate_Handler,
		},
		{
			MethodName: "StockMoveUpdate",
			Handler:    _Stock_StockMoveUpdate_Handler,
		},
		{
			MethodName: "StockMoveDelete",
			Handler:    _Stock_StockMoveDelete_Handler,
		},
		{
			MethodName: "StockMoveList",
			Handler:    _Stock_StockMoveList_Handler,
		},
		{
			MethodName: "StockMoveView",
			Handler:    _Stock_StockMoveView_Handler,
		},
		{
			MethodName: "StockMoveBatchCreate",
			Handler:    _Stock_StockMoveBatchCreate_Handler,
		},
		{
			MethodName: "StockMoveBatchUpdate",
			Handler:    _Stock_StockMoveBatchUpdate_Handler,
		},
		{
			MethodName: "StockMoveBatchDelete",
			Handler:    _Stock_StockMoveBatchDelete_Handler,
		},
		{
			MethodName: "StockMoveUpdatePartial",
			Handler:    _Stock_StockMoveUpdatePartial_Handler,
		},
		{
			MethodName: "StockMoveUpdateAutomaticPartial",
			Handler:    _Stock_StockMoveUpdateAutomaticPartial_Handler,
		},
		{
			MethodName: "SendMsg",
			Handler:    _Stock_SendMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/stock.proto",
}
