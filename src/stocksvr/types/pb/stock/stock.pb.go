// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: proto/stock.proto

package stock

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ReqStockLocationCreate 新建入参
type ReqStockLocationCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	LocationId               uint64 `protobuf:"varint,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Posx                     int64  `protobuf:"varint,3,opt,name=posx,proto3" json:"posx,omitempty"`
	Posy                     int64  `protobuf:"varint,4,opt,name=posy,proto3" json:"posy,omitempty"`
	Posz                     int64  `protobuf:"varint,5,opt,name=posz,proto3" json:"posz,omitempty"`
	CompanyId                uint64 `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	RemovalStrategyId        uint64 `protobuf:"varint,7,opt,name=removal_strategy_id,json=removalStrategyId,proto3" json:"removal_strategy_id,omitempty"`
	CyclicInventoryFrequency int64  `protobuf:"varint,8,opt,name=cyclic_inventory_frequency,json=cyclicInventoryFrequency,proto3" json:"cyclic_inventory_frequency,omitempty"`
	WarehouseId              uint64 `protobuf:"varint,9,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	StorageCategoryId        uint64 `protobuf:"varint,10,opt,name=storage_category_id,json=storageCategoryId,proto3" json:"storage_category_id,omitempty"`
	CreateUid                uint64 `protobuf:"varint,11,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid                 uint64 `protobuf:"varint,12,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                     string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	CompleteName             string `protobuf:"bytes,14,opt,name=complete_name,json=completeName,proto3" json:"complete_name,omitempty"`
	Usage                    string `protobuf:"bytes,15,opt,name=usage,proto3" json:"usage,omitempty"`
	ParentPath               string `protobuf:"bytes,16,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	Barcode                  string `protobuf:"bytes,17,opt,name=barcode,proto3" json:"barcode,omitempty"`
	LastInventoryDate        int64  `protobuf:"varint,18,opt,name=last_inventory_date,json=lastInventoryDate,proto3" json:"last_inventory_date,omitempty"`
	NextInventoryDate        int64  `protobuf:"varint,19,opt,name=next_inventory_date,json=nextInventoryDate,proto3" json:"next_inventory_date,omitempty"`
	Comment                  string `protobuf:"bytes,20,opt,name=comment,proto3" json:"comment,omitempty"`
	Active                   bool   `protobuf:"varint,21,opt,name=active,proto3" json:"active,omitempty"`
	ScrapLocation            bool   `protobuf:"varint,22,opt,name=scrap_location,json=scrapLocation,proto3" json:"scrap_location,omitempty"`
	ReturnLocation           bool   `protobuf:"varint,23,opt,name=return_location,json=returnLocation,proto3" json:"return_location,omitempty"`
	ReplenishLocation        bool   `protobuf:"varint,24,opt,name=replenish_location,json=replenishLocation,proto3" json:"replenish_location,omitempty"`
	CreateDate               int64  `protobuf:"varint,25,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate                int64  `protobuf:"varint,26,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	ValuationInAccountId     uint64 `protobuf:"varint,27,opt,name=valuation_in_account_id,json=valuationInAccountId,proto3" json:"valuation_in_account_id,omitempty"`
	ValuationOutAccountId    uint64 `protobuf:"varint,28,opt,name=valuation_out_account_id,json=valuationOutAccountId,proto3" json:"valuation_out_account_id,omitempty"`
}

func (x *ReqStockLocationCreate) Reset() {
	*x = ReqStockLocationCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockLocationCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockLocationCreate) ProtoMessage() {}

func (x *ReqStockLocationCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockLocationCreate.ProtoReflect.Descriptor instead.
func (*ReqStockLocationCreate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{0}
}

func (x *ReqStockLocationCreate) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetPosx() int64 {
	if x != nil {
		return x.Posx
	}
	return 0
}

func (x *ReqStockLocationCreate) GetPosy() int64 {
	if x != nil {
		return x.Posy
	}
	return 0
}

func (x *ReqStockLocationCreate) GetPosz() int64 {
	if x != nil {
		return x.Posz
	}
	return 0
}

func (x *ReqStockLocationCreate) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetRemovalStrategyId() uint64 {
	if x != nil {
		return x.RemovalStrategyId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetCyclicInventoryFrequency() int64 {
	if x != nil {
		return x.CyclicInventoryFrequency
	}
	return 0
}

func (x *ReqStockLocationCreate) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetStorageCategoryId() uint64 {
	if x != nil {
		return x.StorageCategoryId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockLocationCreate) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockLocationCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockLocationCreate) GetCompleteName() string {
	if x != nil {
		return x.CompleteName
	}
	return ""
}

func (x *ReqStockLocationCreate) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *ReqStockLocationCreate) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *ReqStockLocationCreate) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ReqStockLocationCreate) GetLastInventoryDate() int64 {
	if x != nil {
		return x.LastInventoryDate
	}
	return 0
}

func (x *ReqStockLocationCreate) GetNextInventoryDate() int64 {
	if x != nil {
		return x.NextInventoryDate
	}
	return 0
}

func (x *ReqStockLocationCreate) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReqStockLocationCreate) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ReqStockLocationCreate) GetScrapLocation() bool {
	if x != nil {
		return x.ScrapLocation
	}
	return false
}

func (x *ReqStockLocationCreate) GetReturnLocation() bool {
	if x != nil {
		return x.ReturnLocation
	}
	return false
}

func (x *ReqStockLocationCreate) GetReplenishLocation() bool {
	if x != nil {
		return x.ReplenishLocation
	}
	return false
}

func (x *ReqStockLocationCreate) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockLocationCreate) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockLocationCreate) GetValuationInAccountId() uint64 {
	if x != nil {
		return x.ValuationInAccountId
	}
	return 0
}

func (x *ReqStockLocationCreate) GetValuationOutAccountId() uint64 {
	if x != nil {
		return x.ValuationOutAccountId
	}
	return 0
}

// ResStockLocationCreate 新建出参
type ResStockLocationCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResStockLocationCreate) Reset() {
	*x = ResStockLocationCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockLocationCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockLocationCreate) ProtoMessage() {}

func (x *ResStockLocationCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockLocationCreate.ProtoReflect.Descriptor instead.
func (*ResStockLocationCreate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{1}
}

func (x *ResStockLocationCreate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ReqStockLocationUpdate 修改入参
type ReqStockLocationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                   uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                       uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	LocationId               uint64 `protobuf:"varint,3,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Posx                     int64  `protobuf:"varint,4,opt,name=posx,proto3" json:"posx,omitempty"`
	Posy                     int64  `protobuf:"varint,5,opt,name=posy,proto3" json:"posy,omitempty"`
	Posz                     int64  `protobuf:"varint,6,opt,name=posz,proto3" json:"posz,omitempty"`
	CompanyId                uint64 `protobuf:"varint,7,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	RemovalStrategyId        uint64 `protobuf:"varint,8,opt,name=removal_strategy_id,json=removalStrategyId,proto3" json:"removal_strategy_id,omitempty"`
	CyclicInventoryFrequency int64  `protobuf:"varint,9,opt,name=cyclic_inventory_frequency,json=cyclicInventoryFrequency,proto3" json:"cyclic_inventory_frequency,omitempty"`
	WarehouseId              uint64 `protobuf:"varint,10,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	StorageCategoryId        uint64 `protobuf:"varint,11,opt,name=storage_category_id,json=storageCategoryId,proto3" json:"storage_category_id,omitempty"`
	CreateUid                uint64 `protobuf:"varint,12,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid                 uint64 `protobuf:"varint,13,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                     string `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	CompleteName             string `protobuf:"bytes,15,opt,name=complete_name,json=completeName,proto3" json:"complete_name,omitempty"`
	Usage                    string `protobuf:"bytes,16,opt,name=usage,proto3" json:"usage,omitempty"`
	ParentPath               string `protobuf:"bytes,17,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	Barcode                  string `protobuf:"bytes,18,opt,name=barcode,proto3" json:"barcode,omitempty"`
	LastInventoryDate        int64  `protobuf:"varint,19,opt,name=last_inventory_date,json=lastInventoryDate,proto3" json:"last_inventory_date,omitempty"`
	NextInventoryDate        int64  `protobuf:"varint,20,opt,name=next_inventory_date,json=nextInventoryDate,proto3" json:"next_inventory_date,omitempty"`
	Comment                  string `protobuf:"bytes,21,opt,name=comment,proto3" json:"comment,omitempty"`
	Active                   bool   `protobuf:"varint,22,opt,name=active,proto3" json:"active,omitempty"`
	ScrapLocation            bool   `protobuf:"varint,23,opt,name=scrap_location,json=scrapLocation,proto3" json:"scrap_location,omitempty"`
	ReturnLocation           bool   `protobuf:"varint,24,opt,name=return_location,json=returnLocation,proto3" json:"return_location,omitempty"`
	ReplenishLocation        bool   `protobuf:"varint,25,opt,name=replenish_location,json=replenishLocation,proto3" json:"replenish_location,omitempty"`
	CreateDate               int64  `protobuf:"varint,26,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate                int64  `protobuf:"varint,27,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	ValuationInAccountId     uint64 `protobuf:"varint,28,opt,name=valuation_in_account_id,json=valuationInAccountId,proto3" json:"valuation_in_account_id,omitempty"`
	ValuationOutAccountId    uint64 `protobuf:"varint,29,opt,name=valuation_out_account_id,json=valuationOutAccountId,proto3" json:"valuation_out_account_id,omitempty"`
}

func (x *ReqStockLocationUpdate) Reset() {
	*x = ReqStockLocationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockLocationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockLocationUpdate) ProtoMessage() {}

func (x *ReqStockLocationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockLocationUpdate.ProtoReflect.Descriptor instead.
func (*ReqStockLocationUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{2}
}

func (x *ReqStockLocationUpdate) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetPosx() int64 {
	if x != nil {
		return x.Posx
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetPosy() int64 {
	if x != nil {
		return x.Posy
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetPosz() int64 {
	if x != nil {
		return x.Posz
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetRemovalStrategyId() uint64 {
	if x != nil {
		return x.RemovalStrategyId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetCyclicInventoryFrequency() int64 {
	if x != nil {
		return x.CyclicInventoryFrequency
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetStorageCategoryId() uint64 {
	if x != nil {
		return x.StorageCategoryId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockLocationUpdate) GetCompleteName() string {
	if x != nil {
		return x.CompleteName
	}
	return ""
}

func (x *ReqStockLocationUpdate) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *ReqStockLocationUpdate) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *ReqStockLocationUpdate) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ReqStockLocationUpdate) GetLastInventoryDate() int64 {
	if x != nil {
		return x.LastInventoryDate
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetNextInventoryDate() int64 {
	if x != nil {
		return x.NextInventoryDate
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReqStockLocationUpdate) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ReqStockLocationUpdate) GetScrapLocation() bool {
	if x != nil {
		return x.ScrapLocation
	}
	return false
}

func (x *ReqStockLocationUpdate) GetReturnLocation() bool {
	if x != nil {
		return x.ReturnLocation
	}
	return false
}

func (x *ReqStockLocationUpdate) GetReplenishLocation() bool {
	if x != nil {
		return x.ReplenishLocation
	}
	return false
}

func (x *ReqStockLocationUpdate) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetValuationInAccountId() uint64 {
	if x != nil {
		return x.ValuationInAccountId
	}
	return 0
}

func (x *ReqStockLocationUpdate) GetValuationOutAccountId() uint64 {
	if x != nil {
		return x.ValuationOutAccountId
	}
	return 0
}

// ResStockLocationUpdate 修改出参
type ResStockLocationUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockLocationUpdate) Reset() {
	*x = ResStockLocationUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockLocationUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockLocationUpdate) ProtoMessage() {}

func (x *ResStockLocationUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockLocationUpdate.ProtoReflect.Descriptor instead.
func (*ResStockLocationUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{3}
}

func (x *ResStockLocationUpdate) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

// ReqStockLocationDelete 删除
type ReqStockLocationDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId uint32 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Id        uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqStockLocationDelete) Reset() {
	*x = ReqStockLocationDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockLocationDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockLocationDelete) ProtoMessage() {}

func (x *ReqStockLocationDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockLocationDelete.ProtoReflect.Descriptor instead.
func (*ReqStockLocationDelete) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{4}
}

func (x *ReqStockLocationDelete) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockLocationDelete) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqStockLocationDelete) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ResStockLocationDelete 删除出参
type ResStockLocationDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockLocationDelete) Reset() {
	*x = ResStockLocationDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockLocationDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockLocationDelete) ProtoMessage() {}

func (x *ResStockLocationDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockLocationDelete.ProtoReflect.Descriptor instead.
func (*ResStockLocationDelete) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{5}
}

func (x *ResStockLocationDelete) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

// ReqStockLocationList 列表入参
type ReqStockLocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithTotal                bool     `protobuf:"varint,1,opt,name=with_total,json=withTotal,proto3" json:"with_total,omitempty"`
	WithNoPage               bool     `protobuf:"varint,2,opt,name=with_no_page,json=withNoPage,proto3" json:"with_no_page,omitempty"`
	Page                     uint64   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage                  uint64   `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	OrderBy                  []string `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Id                       uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	LocationId               uint64   `protobuf:"varint,7,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Posx                     int64    `protobuf:"varint,8,opt,name=posx,proto3" json:"posx,omitempty"`
	Posy                     int64    `protobuf:"varint,9,opt,name=posy,proto3" json:"posy,omitempty"`
	Posz                     int64    `protobuf:"varint,10,opt,name=posz,proto3" json:"posz,omitempty"`
	CompanyId                uint64   `protobuf:"varint,11,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	RemovalStrategyId        uint64   `protobuf:"varint,12,opt,name=removal_strategy_id,json=removalStrategyId,proto3" json:"removal_strategy_id,omitempty"`
	CyclicInventoryFrequency int64    `protobuf:"varint,13,opt,name=cyclic_inventory_frequency,json=cyclicInventoryFrequency,proto3" json:"cyclic_inventory_frequency,omitempty"`
	WarehouseId              uint64   `protobuf:"varint,14,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	StorageCategoryId        uint64   `protobuf:"varint,15,opt,name=storage_category_id,json=storageCategoryId,proto3" json:"storage_category_id,omitempty"`
	CreateUid                uint64   `protobuf:"varint,16,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid                 uint64   `protobuf:"varint,17,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                     string   `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	CompleteName             string   `protobuf:"bytes,19,opt,name=complete_name,json=completeName,proto3" json:"complete_name,omitempty"`
	Usage                    string   `protobuf:"bytes,20,opt,name=usage,proto3" json:"usage,omitempty"`
	ParentPath               string   `protobuf:"bytes,21,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	Barcode                  string   `protobuf:"bytes,22,opt,name=barcode,proto3" json:"barcode,omitempty"`
	LastInventoryDate        int64    `protobuf:"varint,23,opt,name=last_inventory_date,json=lastInventoryDate,proto3" json:"last_inventory_date,omitempty"`
	NextInventoryDate        int64    `protobuf:"varint,24,opt,name=next_inventory_date,json=nextInventoryDate,proto3" json:"next_inventory_date,omitempty"`
	Comment                  string   `protobuf:"bytes,25,opt,name=comment,proto3" json:"comment,omitempty"`
	Active                   bool     `protobuf:"varint,26,opt,name=active,proto3" json:"active,omitempty"`
	ScrapLocation            bool     `protobuf:"varint,27,opt,name=scrap_location,json=scrapLocation,proto3" json:"scrap_location,omitempty"`
	ReturnLocation           bool     `protobuf:"varint,28,opt,name=return_location,json=returnLocation,proto3" json:"return_location,omitempty"`
	ReplenishLocation        bool     `protobuf:"varint,29,opt,name=replenish_location,json=replenishLocation,proto3" json:"replenish_location,omitempty"`
	CreateDate               int64    `protobuf:"varint,30,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate                int64    `protobuf:"varint,31,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	ValuationInAccountId     uint64   `protobuf:"varint,32,opt,name=valuation_in_account_id,json=valuationInAccountId,proto3" json:"valuation_in_account_id,omitempty"`
	ValuationOutAccountId    uint64   `protobuf:"varint,33,opt,name=valuation_out_account_id,json=valuationOutAccountId,proto3" json:"valuation_out_account_id,omitempty"`
}

func (x *ReqStockLocationList) Reset() {
	*x = ReqStockLocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockLocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockLocationList) ProtoMessage() {}

func (x *ReqStockLocationList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockLocationList.ProtoReflect.Descriptor instead.
func (*ReqStockLocationList) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{6}
}

func (x *ReqStockLocationList) GetWithTotal() bool {
	if x != nil {
		return x.WithTotal
	}
	return false
}

func (x *ReqStockLocationList) GetWithNoPage() bool {
	if x != nil {
		return x.WithNoPage
	}
	return false
}

func (x *ReqStockLocationList) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqStockLocationList) GetPerPage() uint64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ReqStockLocationList) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ReqStockLocationList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqStockLocationList) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockLocationList) GetPosx() int64 {
	if x != nil {
		return x.Posx
	}
	return 0
}

func (x *ReqStockLocationList) GetPosy() int64 {
	if x != nil {
		return x.Posy
	}
	return 0
}

func (x *ReqStockLocationList) GetPosz() int64 {
	if x != nil {
		return x.Posz
	}
	return 0
}

func (x *ReqStockLocationList) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockLocationList) GetRemovalStrategyId() uint64 {
	if x != nil {
		return x.RemovalStrategyId
	}
	return 0
}

func (x *ReqStockLocationList) GetCyclicInventoryFrequency() int64 {
	if x != nil {
		return x.CyclicInventoryFrequency
	}
	return 0
}

func (x *ReqStockLocationList) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockLocationList) GetStorageCategoryId() uint64 {
	if x != nil {
		return x.StorageCategoryId
	}
	return 0
}

func (x *ReqStockLocationList) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockLocationList) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockLocationList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockLocationList) GetCompleteName() string {
	if x != nil {
		return x.CompleteName
	}
	return ""
}

func (x *ReqStockLocationList) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *ReqStockLocationList) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *ReqStockLocationList) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ReqStockLocationList) GetLastInventoryDate() int64 {
	if x != nil {
		return x.LastInventoryDate
	}
	return 0
}

func (x *ReqStockLocationList) GetNextInventoryDate() int64 {
	if x != nil {
		return x.NextInventoryDate
	}
	return 0
}

func (x *ReqStockLocationList) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ReqStockLocationList) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ReqStockLocationList) GetScrapLocation() bool {
	if x != nil {
		return x.ScrapLocation
	}
	return false
}

func (x *ReqStockLocationList) GetReturnLocation() bool {
	if x != nil {
		return x.ReturnLocation
	}
	return false
}

func (x *ReqStockLocationList) GetReplenishLocation() bool {
	if x != nil {
		return x.ReplenishLocation
	}
	return false
}

func (x *ReqStockLocationList) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockLocationList) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockLocationList) GetValuationInAccountId() uint64 {
	if x != nil {
		return x.ValuationInAccountId
	}
	return 0
}

func (x *ReqStockLocationList) GetValuationOutAccountId() uint64 {
	if x != nil {
		return x.ValuationOutAccountId
	}
	return 0
}

// ResStockLocationList 列表出参
type ResStockLocationList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64               `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*StockLocationItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ResStockLocationList) Reset() {
	*x = ResStockLocationList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockLocationList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockLocationList) ProtoMessage() {}

func (x *ResStockLocationList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockLocationList.ProtoReflect.Descriptor instead.
func (*ResStockLocationList) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{7}
}

func (x *ResStockLocationList) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ResStockLocationList) GetItems() []*StockLocationItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// StockLocationItem 列表内容
type StockLocationItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                       uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	LocationId               uint64 `protobuf:"varint,2,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	Posx                     int64  `protobuf:"varint,3,opt,name=posx,proto3" json:"posx,omitempty"`
	Posy                     int64  `protobuf:"varint,4,opt,name=posy,proto3" json:"posy,omitempty"`
	Posz                     int64  `protobuf:"varint,5,opt,name=posz,proto3" json:"posz,omitempty"`
	CompanyId                uint64 `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	RemovalStrategyId        uint64 `protobuf:"varint,7,opt,name=removal_strategy_id,json=removalStrategyId,proto3" json:"removal_strategy_id,omitempty"`
	CyclicInventoryFrequency int64  `protobuf:"varint,8,opt,name=cyclic_inventory_frequency,json=cyclicInventoryFrequency,proto3" json:"cyclic_inventory_frequency,omitempty"`
	WarehouseId              uint64 `protobuf:"varint,9,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	StorageCategoryId        uint64 `protobuf:"varint,10,opt,name=storage_category_id,json=storageCategoryId,proto3" json:"storage_category_id,omitempty"`
	CreateUid                uint64 `protobuf:"varint,11,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid                 uint64 `protobuf:"varint,12,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                     string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`
	CompleteName             string `protobuf:"bytes,14,opt,name=complete_name,json=completeName,proto3" json:"complete_name,omitempty"`
	Usage                    string `protobuf:"bytes,15,opt,name=usage,proto3" json:"usage,omitempty"`
	ParentPath               string `protobuf:"bytes,16,opt,name=parent_path,json=parentPath,proto3" json:"parent_path,omitempty"`
	Barcode                  string `protobuf:"bytes,17,opt,name=barcode,proto3" json:"barcode,omitempty"`
	LastInventoryDate        int64  `protobuf:"varint,18,opt,name=last_inventory_date,json=lastInventoryDate,proto3" json:"last_inventory_date,omitempty"`
	NextInventoryDate        int64  `protobuf:"varint,19,opt,name=next_inventory_date,json=nextInventoryDate,proto3" json:"next_inventory_date,omitempty"`
	Comment                  string `protobuf:"bytes,20,opt,name=comment,proto3" json:"comment,omitempty"`
	Active                   bool   `protobuf:"varint,21,opt,name=active,proto3" json:"active,omitempty"`
	ScrapLocation            bool   `protobuf:"varint,22,opt,name=scrap_location,json=scrapLocation,proto3" json:"scrap_location,omitempty"`
	ReturnLocation           bool   `protobuf:"varint,23,opt,name=return_location,json=returnLocation,proto3" json:"return_location,omitempty"`
	ReplenishLocation        bool   `protobuf:"varint,24,opt,name=replenish_location,json=replenishLocation,proto3" json:"replenish_location,omitempty"`
	CreateDate               int64  `protobuf:"varint,25,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate                int64  `protobuf:"varint,26,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	ValuationInAccountId     uint64 `protobuf:"varint,27,opt,name=valuation_in_account_id,json=valuationInAccountId,proto3" json:"valuation_in_account_id,omitempty"`
	ValuationOutAccountId    uint64 `protobuf:"varint,28,opt,name=valuation_out_account_id,json=valuationOutAccountId,proto3" json:"valuation_out_account_id,omitempty"`
}

func (x *StockLocationItem) Reset() {
	*x = StockLocationItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockLocationItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockLocationItem) ProtoMessage() {}

func (x *StockLocationItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockLocationItem.ProtoReflect.Descriptor instead.
func (*StockLocationItem) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{8}
}

func (x *StockLocationItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StockLocationItem) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *StockLocationItem) GetPosx() int64 {
	if x != nil {
		return x.Posx
	}
	return 0
}

func (x *StockLocationItem) GetPosy() int64 {
	if x != nil {
		return x.Posy
	}
	return 0
}

func (x *StockLocationItem) GetPosz() int64 {
	if x != nil {
		return x.Posz
	}
	return 0
}

func (x *StockLocationItem) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *StockLocationItem) GetRemovalStrategyId() uint64 {
	if x != nil {
		return x.RemovalStrategyId
	}
	return 0
}

func (x *StockLocationItem) GetCyclicInventoryFrequency() int64 {
	if x != nil {
		return x.CyclicInventoryFrequency
	}
	return 0
}

func (x *StockLocationItem) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *StockLocationItem) GetStorageCategoryId() uint64 {
	if x != nil {
		return x.StorageCategoryId
	}
	return 0
}

func (x *StockLocationItem) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *StockLocationItem) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *StockLocationItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockLocationItem) GetCompleteName() string {
	if x != nil {
		return x.CompleteName
	}
	return ""
}

func (x *StockLocationItem) GetUsage() string {
	if x != nil {
		return x.Usage
	}
	return ""
}

func (x *StockLocationItem) GetParentPath() string {
	if x != nil {
		return x.ParentPath
	}
	return ""
}

func (x *StockLocationItem) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *StockLocationItem) GetLastInventoryDate() int64 {
	if x != nil {
		return x.LastInventoryDate
	}
	return 0
}

func (x *StockLocationItem) GetNextInventoryDate() int64 {
	if x != nil {
		return x.NextInventoryDate
	}
	return 0
}

func (x *StockLocationItem) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *StockLocationItem) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *StockLocationItem) GetScrapLocation() bool {
	if x != nil {
		return x.ScrapLocation
	}
	return false
}

func (x *StockLocationItem) GetReturnLocation() bool {
	if x != nil {
		return x.ReturnLocation
	}
	return false
}

func (x *StockLocationItem) GetReplenishLocation() bool {
	if x != nil {
		return x.ReplenishLocation
	}
	return false
}

func (x *StockLocationItem) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *StockLocationItem) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *StockLocationItem) GetValuationInAccountId() uint64 {
	if x != nil {
		return x.ValuationInAccountId
	}
	return 0
}

func (x *StockLocationItem) GetValuationOutAccountId() uint64 {
	if x != nil {
		return x.ValuationOutAccountId
	}
	return 0
}

type ReqStockMoveCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                uint64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Sequence              int64   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64  `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64   `protobuf:"varint,5,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64  `protobuf:"varint,6,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64  `protobuf:"varint,7,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64  `protobuf:"varint,8,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64  `protobuf:"varint,9,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64  `protobuf:"varint,10,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64  `protobuf:"varint,11,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64  `protobuf:"varint,12,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64  `protobuf:"varint,13,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64  `protobuf:"varint,14,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64  `protobuf:"varint,15,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64  `protobuf:"varint,16,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64   `protobuf:"varint,17,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64  `protobuf:"varint,18,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64  `protobuf:"varint,19,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64  `protobuf:"varint,20,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64  `protobuf:"varint,21,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string  `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string  `protobuf:"bytes,23,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string  `protobuf:"bytes,24,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string  `protobuf:"bytes,25,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string  `protobuf:"bytes,26,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string  `protobuf:"bytes,27,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string  `protobuf:"bytes,28,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64   `protobuf:"varint,29,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string  `protobuf:"bytes,30,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64 `protobuf:"fixed64,31,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64 `protobuf:"fixed64,32,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64 `protobuf:"fixed64,33,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool    `protobuf:"varint,34,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool    `protobuf:"varint,35,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool    `protobuf:"varint,36,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool    `protobuf:"varint,37,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64   `protobuf:"varint,38,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64   `protobuf:"varint,39,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64   `protobuf:"varint,40,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64   `protobuf:"varint,41,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64   `protobuf:"varint,42,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64 `protobuf:"fixed64,43,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64  `protobuf:"varint,44,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool    `protobuf:"varint,45,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64  `protobuf:"varint,46,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64  `protobuf:"varint,47,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64  `protobuf:"varint,48,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *ReqStockMoveCreate) Reset() {
	*x = ReqStockMoveCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveCreate) ProtoMessage() {}

func (x *ReqStockMoveCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveCreate.ProtoReflect.Descriptor instead.
func (*ReqStockMoveCreate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{9}
}

func (x *ReqStockMoveCreate) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ReqStockMoveCreate) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *ReqStockMoveCreate) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *ReqStockMoveCreate) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockMoveCreate) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockMoveCreate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockMoveCreate) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ReqStockMoveCreate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ReqStockMoveCreate) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqStockMoveCreate) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *ReqStockMoveCreate) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ReqStockMoveCreate) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *ReqStockMoveCreate) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *ReqStockMoveCreate) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *ReqStockMoveCreate) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *ReqStockMoveCreate) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *ReqStockMoveCreate) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *ReqStockMoveCreate) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *ReqStockMoveCreate) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *ReqStockMoveCreate) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *ReqStockMoveCreate) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *ReqStockMoveCreate) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqStockMoveCreate) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *ReqStockMoveCreate) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *ReqStockMoveCreate) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockMoveCreate) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockMoveCreate) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *ReqStockMoveCreate) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *ReqStockMoveCreate) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *ReqStockMoveCreate) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ResStockMoveCreate 新建出参
type ResStockMoveCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResStockMoveCreate) Reset() {
	*x = ResStockMoveCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveCreate) ProtoMessage() {}

func (x *ResStockMoveCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveCreate.ProtoReflect.Descriptor instead.
func (*ResStockMoveCreate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{10}
}

func (x *ResStockMoveCreate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ReqStockMoveUpdate 修改入参
type ReqStockMoveUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                uint64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Id                    uint64  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Sequence              int64   `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64  `protobuf:"varint,4,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64  `protobuf:"varint,5,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64   `protobuf:"varint,6,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64  `protobuf:"varint,7,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64  `protobuf:"varint,8,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64  `protobuf:"varint,9,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64  `protobuf:"varint,10,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64  `protobuf:"varint,11,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64  `protobuf:"varint,12,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64  `protobuf:"varint,13,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64  `protobuf:"varint,14,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64  `protobuf:"varint,15,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64  `protobuf:"varint,16,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64  `protobuf:"varint,17,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64   `protobuf:"varint,18,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64  `protobuf:"varint,19,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64  `protobuf:"varint,20,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64  `protobuf:"varint,21,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64  `protobuf:"varint,22,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string  `protobuf:"bytes,23,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string  `protobuf:"bytes,24,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string  `protobuf:"bytes,25,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string  `protobuf:"bytes,26,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string  `protobuf:"bytes,27,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string  `protobuf:"bytes,28,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string  `protobuf:"bytes,29,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64   `protobuf:"varint,30,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string  `protobuf:"bytes,31,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64 `protobuf:"fixed64,32,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64 `protobuf:"fixed64,33,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64 `protobuf:"fixed64,34,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool    `protobuf:"varint,35,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool    `protobuf:"varint,36,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool    `protobuf:"varint,37,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool    `protobuf:"varint,38,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64   `protobuf:"varint,39,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64   `protobuf:"varint,40,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64   `protobuf:"varint,41,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64   `protobuf:"varint,42,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64   `protobuf:"varint,43,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64 `protobuf:"fixed64,44,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64  `protobuf:"varint,45,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool    `protobuf:"varint,46,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64  `protobuf:"varint,47,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64  `protobuf:"varint,48,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64  `protobuf:"varint,49,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *ReqStockMoveUpdate) Reset() {
	*x = ReqStockMoveUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveUpdate) ProtoMessage() {}

func (x *ReqStockMoveUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveUpdate.ProtoReflect.Descriptor instead.
func (*ReqStockMoveUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{11}
}

func (x *ReqStockMoveUpdate) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *ReqStockMoveUpdate) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *ReqStockMoveUpdate) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *ReqStockMoveUpdate) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *ReqStockMoveUpdate) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *ReqStockMoveUpdate) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *ReqStockMoveUpdate) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *ReqStockMoveUpdate) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ResStockMoveUpdate 修改出参
type ResStockMoveUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockMoveUpdate) Reset() {
	*x = ResStockMoveUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveUpdate) ProtoMessage() {}

func (x *ResStockMoveUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveUpdate.ProtoReflect.Descriptor instead.
func (*ResStockMoveUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{12}
}

func (x *ResStockMoveUpdate) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

// ReqStockMoveDelete 删除
type ReqStockMoveDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId uint32 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Id        uint64 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqStockMoveDelete) Reset() {
	*x = ReqStockMoveDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveDelete) ProtoMessage() {}

func (x *ReqStockMoveDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveDelete.ProtoReflect.Descriptor instead.
func (*ReqStockMoveDelete) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{13}
}

func (x *ReqStockMoveDelete) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveDelete) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqStockMoveDelete) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ResStockMoveDelete 删除出参
type ResStockMoveDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockMoveDelete) Reset() {
	*x = ResStockMoveDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveDelete) ProtoMessage() {}

func (x *ResStockMoveDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveDelete.ProtoReflect.Descriptor instead.
func (*ResStockMoveDelete) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{14}
}

func (x *ResStockMoveDelete) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

// ReqStockMoveList 列表入参
type ReqStockMoveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithTotal             bool     `protobuf:"varint,1,opt,name=with_total,json=withTotal,proto3" json:"with_total,omitempty"`
	WithNoPage            bool     `protobuf:"varint,2,opt,name=with_no_page,json=withNoPage,proto3" json:"with_no_page,omitempty"`
	Page                  uint64   `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	PerPage               uint64   `protobuf:"varint,4,opt,name=per_page,json=perPage,proto3" json:"per_page,omitempty"`
	OrderBy               []string `protobuf:"bytes,5,rep,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Id                    uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Sequence              int64    `protobuf:"varint,7,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64   `protobuf:"varint,8,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64   `protobuf:"varint,9,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64    `protobuf:"varint,10,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64   `protobuf:"varint,11,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64   `protobuf:"varint,12,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64   `protobuf:"varint,13,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64   `protobuf:"varint,14,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64   `protobuf:"varint,15,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64   `protobuf:"varint,16,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64   `protobuf:"varint,17,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64   `protobuf:"varint,18,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64   `protobuf:"varint,19,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64   `protobuf:"varint,20,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64   `protobuf:"varint,21,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64    `protobuf:"varint,22,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64   `protobuf:"varint,23,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64   `protobuf:"varint,24,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64   `protobuf:"varint,25,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64   `protobuf:"varint,26,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string   `protobuf:"bytes,27,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string   `protobuf:"bytes,28,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string   `protobuf:"bytes,29,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string   `protobuf:"bytes,30,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string   `protobuf:"bytes,31,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string   `protobuf:"bytes,32,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string   `protobuf:"bytes,33,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64    `protobuf:"varint,34,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string   `protobuf:"bytes,35,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64  `protobuf:"fixed64,36,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64  `protobuf:"fixed64,37,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64  `protobuf:"fixed64,38,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool     `protobuf:"varint,39,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool     `protobuf:"varint,40,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool     `protobuf:"varint,41,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool     `protobuf:"varint,42,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64    `protobuf:"varint,43,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64    `protobuf:"varint,44,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64    `protobuf:"varint,45,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64    `protobuf:"varint,46,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64    `protobuf:"varint,47,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64  `protobuf:"fixed64,48,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64   `protobuf:"varint,49,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool     `protobuf:"varint,50,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64   `protobuf:"varint,51,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64   `protobuf:"varint,52,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64   `protobuf:"varint,53,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *ReqStockMoveList) Reset() {
	*x = ReqStockMoveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveList) ProtoMessage() {}

func (x *ReqStockMoveList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveList.ProtoReflect.Descriptor instead.
func (*ReqStockMoveList) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{15}
}

func (x *ReqStockMoveList) GetWithTotal() bool {
	if x != nil {
		return x.WithTotal
	}
	return false
}

func (x *ReqStockMoveList) GetWithNoPage() bool {
	if x != nil {
		return x.WithNoPage
	}
	return false
}

func (x *ReqStockMoveList) GetPage() uint64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ReqStockMoveList) GetPerPage() uint64 {
	if x != nil {
		return x.PerPage
	}
	return 0
}

func (x *ReqStockMoveList) GetOrderBy() []string {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *ReqStockMoveList) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ReqStockMoveList) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ReqStockMoveList) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockMoveList) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ReqStockMoveList) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *ReqStockMoveList) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockMoveList) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *ReqStockMoveList) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *ReqStockMoveList) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *ReqStockMoveList) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqStockMoveList) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ReqStockMoveList) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *ReqStockMoveList) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *ReqStockMoveList) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *ReqStockMoveList) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockMoveList) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *ReqStockMoveList) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *ReqStockMoveList) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *ReqStockMoveList) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *ReqStockMoveList) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockMoveList) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockMoveList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockMoveList) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ReqStockMoveList) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ReqStockMoveList) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqStockMoveList) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *ReqStockMoveList) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ReqStockMoveList) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *ReqStockMoveList) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *ReqStockMoveList) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *ReqStockMoveList) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *ReqStockMoveList) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *ReqStockMoveList) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *ReqStockMoveList) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *ReqStockMoveList) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *ReqStockMoveList) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *ReqStockMoveList) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *ReqStockMoveList) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqStockMoveList) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *ReqStockMoveList) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *ReqStockMoveList) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockMoveList) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockMoveList) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *ReqStockMoveList) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *ReqStockMoveList) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *ReqStockMoveList) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *ReqStockMoveList) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *ReqStockMoveList) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ResStockMoveList 列表出参
type ResStockMoveList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint64           `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Items []*StockMoveItem `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ResStockMoveList) Reset() {
	*x = ResStockMoveList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveList) ProtoMessage() {}

func (x *ResStockMoveList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveList.ProtoReflect.Descriptor instead.
func (*ResStockMoveList) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{16}
}

func (x *ResStockMoveList) GetTotal() uint64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ResStockMoveList) GetItems() []*StockMoveItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// StockMoveItem 列表内容
type StockMoveItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sequence              int64   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64  `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64   `protobuf:"varint,5,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64  `protobuf:"varint,6,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64  `protobuf:"varint,7,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64  `protobuf:"varint,8,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64  `protobuf:"varint,9,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64  `protobuf:"varint,10,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64  `protobuf:"varint,11,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64  `protobuf:"varint,12,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64  `protobuf:"varint,13,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64  `protobuf:"varint,14,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64  `protobuf:"varint,15,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64  `protobuf:"varint,16,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64   `protobuf:"varint,17,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64  `protobuf:"varint,18,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64  `protobuf:"varint,19,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64  `protobuf:"varint,20,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64  `protobuf:"varint,21,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string  `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string  `protobuf:"bytes,23,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string  `protobuf:"bytes,24,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string  `protobuf:"bytes,25,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string  `protobuf:"bytes,26,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string  `protobuf:"bytes,27,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string  `protobuf:"bytes,28,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64   `protobuf:"varint,29,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string  `protobuf:"bytes,30,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64 `protobuf:"fixed64,31,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64 `protobuf:"fixed64,32,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64 `protobuf:"fixed64,33,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool    `protobuf:"varint,34,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool    `protobuf:"varint,35,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool    `protobuf:"varint,36,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool    `protobuf:"varint,37,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64   `protobuf:"varint,38,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64   `protobuf:"varint,39,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64   `protobuf:"varint,40,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64   `protobuf:"varint,41,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64   `protobuf:"varint,42,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64 `protobuf:"fixed64,43,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64  `protobuf:"varint,44,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool    `protobuf:"varint,45,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64  `protobuf:"varint,46,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64  `protobuf:"varint,47,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64  `protobuf:"varint,48,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *StockMoveItem) Reset() {
	*x = StockMoveItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMoveItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMoveItem) ProtoMessage() {}

func (x *StockMoveItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMoveItem.ProtoReflect.Descriptor instead.
func (*StockMoveItem) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{17}
}

func (x *StockMoveItem) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *StockMoveItem) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *StockMoveItem) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *StockMoveItem) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *StockMoveItem) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *StockMoveItem) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *StockMoveItem) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *StockMoveItem) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *StockMoveItem) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *StockMoveItem) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StockMoveItem) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *StockMoveItem) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *StockMoveItem) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *StockMoveItem) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *StockMoveItem) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *StockMoveItem) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *StockMoveItem) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *StockMoveItem) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *StockMoveItem) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *StockMoveItem) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *StockMoveItem) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *StockMoveItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockMoveItem) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *StockMoveItem) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StockMoveItem) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *StockMoveItem) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *StockMoveItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *StockMoveItem) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *StockMoveItem) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *StockMoveItem) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *StockMoveItem) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *StockMoveItem) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *StockMoveItem) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *StockMoveItem) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *StockMoveItem) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *StockMoveItem) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *StockMoveItem) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *StockMoveItem) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StockMoveItem) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *StockMoveItem) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *StockMoveItem) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *StockMoveItem) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *StockMoveItem) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *StockMoveItem) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *StockMoveItem) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *StockMoveItem) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *StockMoveItem) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *StockMoveItem) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ReqStockMoveView 单个查询入参
type ReqStockMoveView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqStockMoveView) Reset() {
	*x = ReqStockMoveView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveView) ProtoMessage() {}

func (x *ReqStockMoveView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveView.ProtoReflect.Descriptor instead.
func (*ReqStockMoveView) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{18}
}

func (x *ReqStockMoveView) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// ResStockMoveView 单个查询出参
type ResStockMoveView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sequence              int64   `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64  `protobuf:"varint,3,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64  `protobuf:"varint,4,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64   `protobuf:"varint,5,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64  `protobuf:"varint,6,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64  `protobuf:"varint,7,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64  `protobuf:"varint,8,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64  `protobuf:"varint,9,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64  `protobuf:"varint,10,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64  `protobuf:"varint,11,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64  `protobuf:"varint,12,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64  `protobuf:"varint,13,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64  `protobuf:"varint,14,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64  `protobuf:"varint,15,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64  `protobuf:"varint,16,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64   `protobuf:"varint,17,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64  `protobuf:"varint,18,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64  `protobuf:"varint,19,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64  `protobuf:"varint,20,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64  `protobuf:"varint,21,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string  `protobuf:"bytes,22,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string  `protobuf:"bytes,23,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string  `protobuf:"bytes,24,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string  `protobuf:"bytes,25,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string  `protobuf:"bytes,26,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string  `protobuf:"bytes,27,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string  `protobuf:"bytes,28,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64   `protobuf:"varint,29,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string  `protobuf:"bytes,30,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64 `protobuf:"fixed64,31,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64 `protobuf:"fixed64,32,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64 `protobuf:"fixed64,33,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool    `protobuf:"varint,34,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool    `protobuf:"varint,35,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool    `protobuf:"varint,36,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool    `protobuf:"varint,37,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64   `protobuf:"varint,38,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64   `protobuf:"varint,39,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64   `protobuf:"varint,40,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64   `protobuf:"varint,41,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64   `protobuf:"varint,42,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64 `protobuf:"fixed64,43,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64  `protobuf:"varint,44,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool    `protobuf:"varint,45,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64  `protobuf:"varint,46,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64  `protobuf:"varint,47,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64  `protobuf:"varint,48,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *ResStockMoveView) Reset() {
	*x = ResStockMoveView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveView) ProtoMessage() {}

func (x *ResStockMoveView) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveView.ProtoReflect.Descriptor instead.
func (*ResStockMoveView) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{19}
}

func (x *ResStockMoveView) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ResStockMoveView) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ResStockMoveView) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ResStockMoveView) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ResStockMoveView) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *ResStockMoveView) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ResStockMoveView) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *ResStockMoveView) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *ResStockMoveView) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *ResStockMoveView) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ResStockMoveView) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ResStockMoveView) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *ResStockMoveView) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *ResStockMoveView) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *ResStockMoveView) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ResStockMoveView) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *ResStockMoveView) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *ResStockMoveView) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *ResStockMoveView) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *ResStockMoveView) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ResStockMoveView) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ResStockMoveView) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResStockMoveView) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ResStockMoveView) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ResStockMoveView) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ResStockMoveView) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *ResStockMoveView) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ResStockMoveView) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *ResStockMoveView) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *ResStockMoveView) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *ResStockMoveView) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *ResStockMoveView) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *ResStockMoveView) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *ResStockMoveView) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *ResStockMoveView) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *ResStockMoveView) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *ResStockMoveView) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *ResStockMoveView) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ResStockMoveView) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *ResStockMoveView) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *ResStockMoveView) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ResStockMoveView) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ResStockMoveView) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *ResStockMoveView) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *ResStockMoveView) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *ResStockMoveView) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *ResStockMoveView) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *ResStockMoveView) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ReqStockMoveBatchCreate 批量新建入参
type ReqStockMoveBatchCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64                      `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId uint32                      `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Items     []*StockMoveBatchCreateItem `protobuf:"bytes,3,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ReqStockMoveBatchCreate) Reset() {
	*x = ReqStockMoveBatchCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveBatchCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveBatchCreate) ProtoMessage() {}

func (x *ReqStockMoveBatchCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveBatchCreate.ProtoReflect.Descriptor instead.
func (*ReqStockMoveBatchCreate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{20}
}

func (x *ReqStockMoveBatchCreate) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveBatchCreate) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqStockMoveBatchCreate) GetItems() []*StockMoveBatchCreateItem {
	if x != nil {
		return x.Items
	}
	return nil
}

// ResStockMoveCreate 批量新建出参
type ResStockMoveBatchCreate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ResStockMoveBatchCreate) Reset() {
	*x = ResStockMoveBatchCreate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveBatchCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveBatchCreate) ProtoMessage() {}

func (x *ResStockMoveBatchCreate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveBatchCreate.ProtoReflect.Descriptor instead.
func (*ResStockMoveBatchCreate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{21}
}

func (x *ResStockMoveBatchCreate) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

// StockMoveBatchCreateItem 批量新增内容
type StockMoveBatchCreateItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence              int64   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64   `protobuf:"varint,4,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64  `protobuf:"varint,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64  `protobuf:"varint,6,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64  `protobuf:"varint,7,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64  `protobuf:"varint,8,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64  `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64  `protobuf:"varint,10,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64  `protobuf:"varint,11,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64  `protobuf:"varint,12,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64  `protobuf:"varint,13,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64  `protobuf:"varint,14,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64  `protobuf:"varint,15,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64   `protobuf:"varint,16,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64  `protobuf:"varint,17,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64  `protobuf:"varint,18,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64  `protobuf:"varint,19,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64  `protobuf:"varint,20,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string  `protobuf:"bytes,21,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string  `protobuf:"bytes,22,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string  `protobuf:"bytes,23,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string  `protobuf:"bytes,24,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string  `protobuf:"bytes,25,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string  `protobuf:"bytes,26,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string  `protobuf:"bytes,27,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64   `protobuf:"varint,28,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string  `protobuf:"bytes,29,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64 `protobuf:"fixed64,30,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64 `protobuf:"fixed64,31,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64 `protobuf:"fixed64,32,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool    `protobuf:"varint,33,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool    `protobuf:"varint,34,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool    `protobuf:"varint,35,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool    `protobuf:"varint,36,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64   `protobuf:"varint,37,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64   `protobuf:"varint,38,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64   `protobuf:"varint,39,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64   `protobuf:"varint,40,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64   `protobuf:"varint,41,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64 `protobuf:"fixed64,42,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64  `protobuf:"varint,43,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool    `protobuf:"varint,44,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64  `protobuf:"varint,45,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64  `protobuf:"varint,46,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64  `protobuf:"varint,47,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *StockMoveBatchCreateItem) Reset() {
	*x = StockMoveBatchCreateItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockMoveBatchCreateItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockMoveBatchCreateItem) ProtoMessage() {}

func (x *StockMoveBatchCreateItem) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockMoveBatchCreateItem.ProtoReflect.Descriptor instead.
func (*StockMoveBatchCreateItem) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{22}
}

func (x *StockMoveBatchCreateItem) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *StockMoveBatchCreateItem) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *StockMoveBatchCreateItem) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *StockMoveBatchCreateItem) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *StockMoveBatchCreateItem) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *StockMoveBatchCreateItem) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *StockMoveBatchCreateItem) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *StockMoveBatchCreateItem) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ReqStockMoveBatchUpdate 批量修改入参
type ReqStockMoveBatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId             uint32   `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Ids                   []uint64 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Sequence              int64    `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64   `protobuf:"varint,5,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64   `protobuf:"varint,6,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64    `protobuf:"varint,7,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64   `protobuf:"varint,8,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64   `protobuf:"varint,9,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64   `protobuf:"varint,10,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64   `protobuf:"varint,11,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64   `protobuf:"varint,12,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64   `protobuf:"varint,13,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64   `protobuf:"varint,14,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64   `protobuf:"varint,15,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64   `protobuf:"varint,16,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64   `protobuf:"varint,17,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64   `protobuf:"varint,18,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64    `protobuf:"varint,19,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64   `protobuf:"varint,20,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64   `protobuf:"varint,21,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64   `protobuf:"varint,22,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64   `protobuf:"varint,23,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string   `protobuf:"bytes,24,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string   `protobuf:"bytes,25,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string   `protobuf:"bytes,26,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string   `protobuf:"bytes,27,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string   `protobuf:"bytes,28,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string   `protobuf:"bytes,29,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string   `protobuf:"bytes,30,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64    `protobuf:"varint,31,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string   `protobuf:"bytes,32,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64  `protobuf:"fixed64,33,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64  `protobuf:"fixed64,34,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64  `protobuf:"fixed64,35,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool     `protobuf:"varint,36,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool     `protobuf:"varint,37,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool     `protobuf:"varint,38,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool     `protobuf:"varint,39,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64    `protobuf:"varint,40,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64    `protobuf:"varint,41,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64    `protobuf:"varint,42,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64    `protobuf:"varint,43,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64    `protobuf:"varint,44,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64  `protobuf:"fixed64,45,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64   `protobuf:"varint,46,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool     `protobuf:"varint,47,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64   `protobuf:"varint,48,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64   `protobuf:"varint,49,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64   `protobuf:"varint,50,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *ReqStockMoveBatchUpdate) Reset() {
	*x = ReqStockMoveBatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveBatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveBatchUpdate) ProtoMessage() {}

func (x *ReqStockMoveBatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveBatchUpdate.ProtoReflect.Descriptor instead.
func (*ReqStockMoveBatchUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{23}
}

func (x *ReqStockMoveBatchUpdate) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ReqStockMoveBatchUpdate) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *ReqStockMoveBatchUpdate) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *ReqStockMoveBatchUpdate) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *ReqStockMoveBatchUpdate) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *ReqStockMoveBatchUpdate) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *ReqStockMoveBatchUpdate) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *ReqStockMoveBatchUpdate) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *ReqStockMoveBatchUpdate) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ResStockMoveBatchUpdate 批量修改出参
type ResStockMoveBatchUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockMoveBatchUpdate) Reset() {
	*x = ResStockMoveBatchUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveBatchUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveBatchUpdate) ProtoMessage() {}

func (x *ResStockMoveBatchUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveBatchUpdate.ProtoReflect.Descriptor instead.
func (*ResStockMoveBatchUpdate) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{24}
}

func (x *ResStockMoveBatchUpdate) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

// ReqStockMoveBatchDelete 批量删除
type ReqStockMoveBatchDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Ids       []uint64 `protobuf:"varint,2,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	ChannelId uint32   `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *ReqStockMoveBatchDelete) Reset() {
	*x = ReqStockMoveBatchDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveBatchDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveBatchDelete) ProtoMessage() {}

func (x *ReqStockMoveBatchDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveBatchDelete.ProtoReflect.Descriptor instead.
func (*ReqStockMoveBatchDelete) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{25}
}

func (x *ReqStockMoveBatchDelete) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveBatchDelete) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ReqStockMoveBatchDelete) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// ResStockMoveBatchDelete 批量删除出参
type ResStockMoveBatchDelete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockMoveBatchDelete) Reset() {
	*x = ResStockMoveBatchDelete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveBatchDelete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveBatchDelete) ProtoMessage() {}

func (x *ResStockMoveBatchDelete) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveBatchDelete.ProtoReflect.Descriptor instead.
func (*ResStockMoveBatchDelete) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{26}
}

func (x *ResStockMoveBatchDelete) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

type ReqStockMoveUpdatePartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId                uint64   `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ChannelId             uint32   `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Ids                   []uint64 `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Fields                []string `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	Sequence              int64    `protobuf:"varint,5,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64   `protobuf:"varint,6,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64   `protobuf:"varint,7,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64    `protobuf:"varint,8,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64   `protobuf:"varint,9,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64   `protobuf:"varint,10,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64   `protobuf:"varint,11,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64   `protobuf:"varint,12,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64   `protobuf:"varint,13,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64   `protobuf:"varint,14,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64   `protobuf:"varint,15,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64   `protobuf:"varint,16,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64   `protobuf:"varint,17,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64   `protobuf:"varint,18,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64   `protobuf:"varint,19,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64    `protobuf:"varint,20,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64   `protobuf:"varint,21,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64   `protobuf:"varint,22,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64   `protobuf:"varint,23,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64   `protobuf:"varint,24,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string   `protobuf:"bytes,25,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string   `protobuf:"bytes,26,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string   `protobuf:"bytes,27,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string   `protobuf:"bytes,28,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string   `protobuf:"bytes,29,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string   `protobuf:"bytes,30,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string   `protobuf:"bytes,31,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64    `protobuf:"varint,32,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string   `protobuf:"bytes,33,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64  `protobuf:"fixed64,34,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64  `protobuf:"fixed64,35,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64  `protobuf:"fixed64,36,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool     `protobuf:"varint,37,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool     `protobuf:"varint,38,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool     `protobuf:"varint,39,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool     `protobuf:"varint,40,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64    `protobuf:"varint,41,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64    `protobuf:"varint,42,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64    `protobuf:"varint,43,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64    `protobuf:"varint,44,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64    `protobuf:"varint,45,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64  `protobuf:"fixed64,46,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64   `protobuf:"varint,47,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool     `protobuf:"varint,48,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64   `protobuf:"varint,49,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64   `protobuf:"varint,50,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64   `protobuf:"varint,51,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *ReqStockMoveUpdatePartial) Reset() {
	*x = ReqStockMoveUpdatePartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveUpdatePartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveUpdatePartial) ProtoMessage() {}

func (x *ReqStockMoveUpdatePartial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveUpdatePartial.ProtoReflect.Descriptor instead.
func (*ReqStockMoveUpdatePartial) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{27}
}

func (x *ReqStockMoveUpdatePartial) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetChannelId() uint32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetIds() []uint64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *ReqStockMoveUpdatePartial) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ReqStockMoveUpdatePartial) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *ReqStockMoveUpdatePartial) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *ReqStockMoveUpdatePartial) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *ReqStockMoveUpdatePartial) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *ReqStockMoveUpdatePartial) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *ReqStockMoveUpdatePartial) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *ReqStockMoveUpdatePartial) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *ReqStockMoveUpdatePartial) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

// ResStockMoveBatchUpdate 批量修改出参
type ResStockMoveUpdatePartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockMoveUpdatePartial) Reset() {
	*x = ResStockMoveUpdatePartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveUpdatePartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveUpdatePartial) ProtoMessage() {}

func (x *ResStockMoveUpdatePartial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveUpdatePartial.ProtoReflect.Descriptor instead.
func (*ResStockMoveUpdatePartial) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{28}
}

func (x *ResStockMoveUpdatePartial) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

type TenantUpdateAutomatic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sequence              int64   `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	CompanyId             uint64  `protobuf:"varint,2,opt,name=company_id,json=companyId,proto3" json:"company_id,omitempty"`
	ProductId             uint64  `protobuf:"varint,3,opt,name=product_id,json=productId,proto3" json:"product_id,omitempty"`
	ProductUom            int64   `protobuf:"varint,4,opt,name=product_uom,json=productUom,proto3" json:"product_uom,omitempty"`
	LocationId            uint64  `protobuf:"varint,5,opt,name=location_id,json=locationId,proto3" json:"location_id,omitempty"`
	LocationDestId        uint64  `protobuf:"varint,6,opt,name=location_dest_id,json=locationDestId,proto3" json:"location_dest_id,omitempty"`
	PartnerId             uint64  `protobuf:"varint,7,opt,name=partner_id,json=partnerId,proto3" json:"partner_id,omitempty"`
	PickingId             uint64  `protobuf:"varint,8,opt,name=picking_id,json=pickingId,proto3" json:"picking_id,omitempty"`
	GroupId               uint64  `protobuf:"varint,9,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	RuleId                uint64  `protobuf:"varint,10,opt,name=rule_id,json=ruleId,proto3" json:"rule_id,omitempty"`
	PickingTypeId         uint64  `protobuf:"varint,11,opt,name=picking_type_id,json=pickingTypeId,proto3" json:"picking_type_id,omitempty"`
	OriginReturnedMoveId  uint64  `protobuf:"varint,12,opt,name=origin_returned_move_id,json=originReturnedMoveId,proto3" json:"origin_returned_move_id,omitempty"`
	RestrictPartnerId     uint64  `protobuf:"varint,13,opt,name=restrict_partner_id,json=restrictPartnerId,proto3" json:"restrict_partner_id,omitempty"`
	WarehouseId           uint64  `protobuf:"varint,14,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id,omitempty"`
	PackageLevelId        uint64  `protobuf:"varint,15,opt,name=package_level_id,json=packageLevelId,proto3" json:"package_level_id,omitempty"`
	NextSerialCount       int64   `protobuf:"varint,16,opt,name=next_serial_count,json=nextSerialCount,proto3" json:"next_serial_count,omitempty"`
	OrderpointId          uint64  `protobuf:"varint,17,opt,name=orderpoint_id,json=orderpointId,proto3" json:"orderpoint_id,omitempty"`
	ProductPackagingId    uint64  `protobuf:"varint,18,opt,name=product_packaging_id,json=productPackagingId,proto3" json:"product_packaging_id,omitempty"`
	CreateUid             uint64  `protobuf:"varint,19,opt,name=create_uid,json=createUid,proto3" json:"create_uid,omitempty"`
	WriteUid              uint64  `protobuf:"varint,20,opt,name=write_uid,json=writeUid,proto3" json:"write_uid,omitempty"`
	Name                  string  `protobuf:"bytes,21,opt,name=name,proto3" json:"name,omitempty"`
	Priority              string  `protobuf:"bytes,22,opt,name=priority,proto3" json:"priority,omitempty"`
	State                 string  `protobuf:"bytes,23,opt,name=state,proto3" json:"state,omitempty"`
	Origin                string  `protobuf:"bytes,24,opt,name=origin,proto3" json:"origin,omitempty"`
	ProcureMethod         string  `protobuf:"bytes,25,opt,name=procure_method,json=procureMethod,proto3" json:"procure_method,omitempty"`
	Reference             string  `protobuf:"bytes,26,opt,name=reference,proto3" json:"reference,omitempty"`
	NextSerial            string  `protobuf:"bytes,27,opt,name=next_serial,json=nextSerial,proto3" json:"next_serial,omitempty"`
	ReservationDate       int64   `protobuf:"varint,28,opt,name=reservation_date,json=reservationDate,proto3" json:"reservation_date,omitempty"`
	DescriptionPicking    string  `protobuf:"bytes,29,opt,name=description_picking,json=descriptionPicking,proto3" json:"description_picking,omitempty"`
	ProductQty            float64 `protobuf:"fixed64,30,opt,name=product_qty,json=productQty,proto3" json:"product_qty,omitempty"`
	ProductUomQty         float64 `protobuf:"fixed64,31,opt,name=product_uom_qty,json=productUomQty,proto3" json:"product_uom_qty,omitempty"`
	QuantityDone          float64 `protobuf:"fixed64,32,opt,name=quantity_done,json=quantityDone,proto3" json:"quantity_done,omitempty"`
	Scrapped              bool    `protobuf:"varint,33,opt,name=scrapped,proto3" json:"scrapped,omitempty"`
	PropagateCancel       bool    `protobuf:"varint,34,opt,name=propagate_cancel,json=propagateCancel,proto3" json:"propagate_cancel,omitempty"`
	IsInventory           bool    `protobuf:"varint,35,opt,name=is_inventory,json=isInventory,proto3" json:"is_inventory,omitempty"`
	Additional            bool    `protobuf:"varint,36,opt,name=additional,proto3" json:"additional,omitempty"`
	Date                  int64   `protobuf:"varint,37,opt,name=date,proto3" json:"date,omitempty"`
	DateDeadline          int64   `protobuf:"varint,38,opt,name=date_deadline,json=dateDeadline,proto3" json:"date_deadline,omitempty"`
	DelayAlertDate        int64   `protobuf:"varint,39,opt,name=delay_alert_date,json=delayAlertDate,proto3" json:"delay_alert_date,omitempty"`
	CreateDate            int64   `protobuf:"varint,40,opt,name=create_date,json=createDate,proto3" json:"create_date,omitempty"`
	WriteDate             int64   `protobuf:"varint,41,opt,name=write_date,json=writeDate,proto3" json:"write_date,omitempty"`
	PriceUnit             float64 `protobuf:"fixed64,42,opt,name=price_unit,json=priceUnit,proto3" json:"price_unit,omitempty"`
	AnalyticAccountLineId uint64  `protobuf:"varint,43,opt,name=analytic_account_line_id,json=analyticAccountLineId,proto3" json:"analytic_account_line_id,omitempty"`
	ToRefund              bool    `protobuf:"varint,44,opt,name=to_refund,json=toRefund,proto3" json:"to_refund,omitempty"`
	SaleLineId            uint64  `protobuf:"varint,45,opt,name=sale_line_id,json=saleLineId,proto3" json:"sale_line_id,omitempty"`
	PurchaseLineId        uint64  `protobuf:"varint,46,opt,name=purchase_line_id,json=purchaseLineId,proto3" json:"purchase_line_id,omitempty"`
	CreatedPurchaseLineId uint64  `protobuf:"varint,47,opt,name=created_purchase_line_id,json=createdPurchaseLineId,proto3" json:"created_purchase_line_id,omitempty"`
}

func (x *TenantUpdateAutomatic) Reset() {
	*x = TenantUpdateAutomatic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TenantUpdateAutomatic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TenantUpdateAutomatic) ProtoMessage() {}

func (x *TenantUpdateAutomatic) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TenantUpdateAutomatic.ProtoReflect.Descriptor instead.
func (*TenantUpdateAutomatic) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{29}
}

func (x *TenantUpdateAutomatic) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetCompanyId() uint64 {
	if x != nil {
		return x.CompanyId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetProductId() uint64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetProductUom() int64 {
	if x != nil {
		return x.ProductUom
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetLocationId() uint64 {
	if x != nil {
		return x.LocationId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetLocationDestId() uint64 {
	if x != nil {
		return x.LocationDestId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetPartnerId() uint64 {
	if x != nil {
		return x.PartnerId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetPickingId() uint64 {
	if x != nil {
		return x.PickingId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetGroupId() uint64 {
	if x != nil {
		return x.GroupId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetRuleId() uint64 {
	if x != nil {
		return x.RuleId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetPickingTypeId() uint64 {
	if x != nil {
		return x.PickingTypeId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetOriginReturnedMoveId() uint64 {
	if x != nil {
		return x.OriginReturnedMoveId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetRestrictPartnerId() uint64 {
	if x != nil {
		return x.RestrictPartnerId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetWarehouseId() uint64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetPackageLevelId() uint64 {
	if x != nil {
		return x.PackageLevelId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetNextSerialCount() int64 {
	if x != nil {
		return x.NextSerialCount
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetOrderpointId() uint64 {
	if x != nil {
		return x.OrderpointId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetProductPackagingId() uint64 {
	if x != nil {
		return x.ProductPackagingId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetCreateUid() uint64 {
	if x != nil {
		return x.CreateUid
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetWriteUid() uint64 {
	if x != nil {
		return x.WriteUid
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetPriority() string {
	if x != nil {
		return x.Priority
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetOrigin() string {
	if x != nil {
		return x.Origin
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetProcureMethod() string {
	if x != nil {
		return x.ProcureMethod
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetNextSerial() string {
	if x != nil {
		return x.NextSerial
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetReservationDate() int64 {
	if x != nil {
		return x.ReservationDate
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetDescriptionPicking() string {
	if x != nil {
		return x.DescriptionPicking
	}
	return ""
}

func (x *TenantUpdateAutomatic) GetProductQty() float64 {
	if x != nil {
		return x.ProductQty
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetProductUomQty() float64 {
	if x != nil {
		return x.ProductUomQty
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetQuantityDone() float64 {
	if x != nil {
		return x.QuantityDone
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetScrapped() bool {
	if x != nil {
		return x.Scrapped
	}
	return false
}

func (x *TenantUpdateAutomatic) GetPropagateCancel() bool {
	if x != nil {
		return x.PropagateCancel
	}
	return false
}

func (x *TenantUpdateAutomatic) GetIsInventory() bool {
	if x != nil {
		return x.IsInventory
	}
	return false
}

func (x *TenantUpdateAutomatic) GetAdditional() bool {
	if x != nil {
		return x.Additional
	}
	return false
}

func (x *TenantUpdateAutomatic) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetDateDeadline() int64 {
	if x != nil {
		return x.DateDeadline
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetDelayAlertDate() int64 {
	if x != nil {
		return x.DelayAlertDate
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetCreateDate() int64 {
	if x != nil {
		return x.CreateDate
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetWriteDate() int64 {
	if x != nil {
		return x.WriteDate
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetPriceUnit() float64 {
	if x != nil {
		return x.PriceUnit
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetAnalyticAccountLineId() uint64 {
	if x != nil {
		return x.AnalyticAccountLineId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetToRefund() bool {
	if x != nil {
		return x.ToRefund
	}
	return false
}

func (x *TenantUpdateAutomatic) GetSaleLineId() uint64 {
	if x != nil {
		return x.SaleLineId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetPurchaseLineId() uint64 {
	if x != nil {
		return x.PurchaseLineId
	}
	return 0
}

func (x *TenantUpdateAutomatic) GetCreatedPurchaseLineId() uint64 {
	if x != nil {
		return x.CreatedPurchaseLineId
	}
	return 0
}

type ReqStockMoveUpdateAutomaticPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item   *TenantUpdateAutomatic `protobuf:"bytes,1,opt,name=item,proto3" json:"item,omitempty"`
	Fields []string               `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Id     uint64                 `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReqStockMoveUpdateAutomaticPartial) Reset() {
	*x = ReqStockMoveUpdateAutomaticPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqStockMoveUpdateAutomaticPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqStockMoveUpdateAutomaticPartial) ProtoMessage() {}

func (x *ReqStockMoveUpdateAutomaticPartial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqStockMoveUpdateAutomaticPartial.ProtoReflect.Descriptor instead.
func (*ReqStockMoveUpdateAutomaticPartial) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{30}
}

func (x *ReqStockMoveUpdateAutomaticPartial) GetItem() *TenantUpdateAutomatic {
	if x != nil {
		return x.Item
	}
	return nil
}

func (x *ReqStockMoveUpdateAutomaticPartial) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *ReqStockMoveUpdateAutomaticPartial) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ResStockMoveUpdateAutomaticPartial struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success uint32 `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ResStockMoveUpdateAutomaticPartial) Reset() {
	*x = ResStockMoveUpdateAutomaticPartial{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResStockMoveUpdateAutomaticPartial) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResStockMoveUpdateAutomaticPartial) ProtoMessage() {}

func (x *ResStockMoveUpdateAutomaticPartial) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResStockMoveUpdateAutomaticPartial.ProtoReflect.Descriptor instead.
func (*ResStockMoveUpdateAutomaticPartial) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{31}
}

func (x *ResStockMoveUpdateAutomaticPartial) GetSuccess() uint32 {
	if x != nil {
		return x.Success
	}
	return 0
}

type ReqSendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic   string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Payload string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *ReqSendMsg) Reset() {
	*x = ReqSendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqSendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqSendMsg) ProtoMessage() {}

func (x *ReqSendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqSendMsg.ProtoReflect.Descriptor instead.
func (*ReqSendMsg) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{32}
}

func (x *ReqSendMsg) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ReqSendMsg) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type ResSendMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResSendMsg) Reset() {
	*x = ResSendMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_stock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResSendMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResSendMsg) ProtoMessage() {}

func (x *ResSendMsg) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResSendMsg.ProtoReflect.Descriptor instead.
func (*ResSendMsg) Descriptor() ([]byte, []int) {
	return file_proto_stock_proto_rawDescGZIP(), []int{33}
}

var File_proto_stock_proto protoreflect.FileDescriptor

var file_proto_stock_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x22, 0xf5, 0x07,
	0x0a, 0x16, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x73, 0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a,
	0x1a, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x18, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2e,
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61,
	0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e,
	0x69, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x28, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x85, 0x08, 0x0a, 0x16, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x79, 0x12, 0x12, 0x0a, 0x04,
	0x70, 0x6f, 0x73, 0x7a, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x7a,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12,
	0x3c, 0x0a, 0x1a, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64,
	0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07,
	0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62,
	0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x61,
	0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x75, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x60, 0x0a, 0x16, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x32, 0x0a,
	0x16, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xf5, 0x08, 0x0a, 0x14, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x77, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x69, 0x74,
	0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x73, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f,
	0x73, 0x7a, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49,
	0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x18, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x72, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65,
	0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73,
	0x68, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x61, 0x6c,
	0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x37, 0x0a, 0x18, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x14, 0x52, 0x65, 0x73,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76,
	0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe7, 0x07, 0x0a, 0x11, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x04, 0x70, 0x6f, 0x73, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x73,
	0x7a, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x7a, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x49, 0x64, 0x12, 0x3c, 0x0a, 0x1a,
	0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x5f, 0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x18, 0x63, 0x79, 0x63, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a,
	0x13, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x61, 0x70, 0x5f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x65, 0x6e, 0x69, 0x73, 0x68, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x35, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x76, 0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x76,
	0x61, 0x6c, 0x75, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0xb5, 0x0d, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x51, 0x74, 0x79,
	0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12,
	0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f,
	0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74,
	0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73,
	0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70,
	0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x24, 0x0a, 0x12,
	0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x22, 0xc5, 0x0d, 0x0a, 0x12, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28,
	0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73,
	0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f,
	0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x71, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x51, 0x74, 0x79, 0x12, 0x23,
	0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44,
	0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73,
	0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a,
	0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65,
	0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f,
	0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2c,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12,
	0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x65,
	0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x5c, 0x0a, 0x12, 0x52, 0x65,
	0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xb5, 0x0e, 0x0a, 0x10, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x77, 0x69, 0x74, 0x68, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0c,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x77, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x50, 0x61, 0x67, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x65, 0x72, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x70, 0x65, 0x72, 0x50, 0x61, 0x67, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f,
	0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x20, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f,
	0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x30, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x34, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x57, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x76, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa7, 0x0d, 0x0a, 0x0d, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73,
	0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61,
	0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64,
	0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e,
	0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65,
	0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a,
	0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x1f, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71,
	0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x55, 0x6f, 0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x23, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76,
	0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x26,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79,
	0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c,
	0x79, 0x74, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20,
	0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x76, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xaa, 0x0d, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72,
	0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70,
	0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76,
	0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68,
	0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69,
	0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f,
	0x71, 0x74, 0x79, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x6f, 0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x27, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61,
	0x6c, 0x79, 0x74, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18,
	0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12,
	0x20, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72,
	0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x22, 0x8b, 0x01, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x38, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x76, 0x72, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x22, 0x29, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x0d,
	0x0a, 0x18, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x75, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11,
	0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70,
	0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x26,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x6f, 0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73,
	0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61,
	0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28,
	0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41,
	0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79,
	0x74, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68,
	0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69,
	0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x22, 0xeb, 0x0d, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x17,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f,
	0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f,
	0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x33, 0x0a, 0x17, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x63, 0x0a, 0x17, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x33, 0x0a, 0x17, 0x52, 0x65,
	0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x85, 0x0e, 0x0a, 0x19, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x04, 0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17,
	0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12,
	0x35, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64,
	0x4d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x75, 0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75,
	0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72,
	0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74,
	0x79, 0x18, 0x22, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75,
	0x6f, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f, 0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c,
	0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64,
	0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15,
	0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69, 0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75,
	0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69,
	0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37,
	0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61,
	0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x19, 0x52, 0x65, 0x73, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x9f,
	0x0d, 0x0a, 0x15, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41,
	0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x55, 0x6f, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x75, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x26, 0x0a, 0x0f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x70, 0x69, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x49, 0x64, 0x12,
	0x2e, 0x0a, 0x13, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x72, 0x65,
	0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x75, 0x69, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x77, 0x72, 0x69, 0x74, 0x65, 0x55, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x6f,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x63, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12,
	0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x71, 0x74, 0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x51, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x0f,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x6f, 0x6d, 0x5f, 0x71, 0x74, 0x79, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x55, 0x6f,
	0x6d, 0x51, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x63, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x18, 0x22, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74,
	0x6f, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x18, 0x24, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x64, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x61, 0x6c, 0x65, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f,
	0x75, 0x6e, 0x69, 0x74, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x37, 0x0a, 0x18, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x74, 0x69,
	0x63, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x74, 0x6f, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x61, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x18, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64,
	0x22, 0x81, 0x01, 0x0a, 0x22, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72,
	0x2e, 0x54, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74,
	0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x02, 0x69, 0x64, 0x22, 0x3e, 0x0a, 0x22, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61,
	0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x3c, 0x0a, 0x0a, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d,
	0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67,
	0x32, 0xa0, 0x0a, 0x0a, 0x05, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x59, 0x0a, 0x13, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x59, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x20,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x59, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x20, 0x2e, 0x73, 0x74, 0x6f, 0x63,
	0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4d, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65,
	0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x1a, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4d,
	0x0a, 0x0f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x71,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a,
	0x1c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x47, 0x0a,
	0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d,
	0x6f, 0x76, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x1a, 0x1a, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52,
	0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12,
	0x5c, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f,
	0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a,
	0x14, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72,
	0x2e, 0x52, 0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5c, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76,
	0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x62, 0x0a, 0x16, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52,
	0x65, 0x71, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x23, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b,
	0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x7d, 0x0a,
	0x1f, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x2c, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75,
	0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x1a, 0x2c,
	0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x4d, 0x6f, 0x76, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x75, 0x74, 0x6f,
	0x6d, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x35, 0x0a, 0x07,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73,
	0x76, 0x72, 0x2e, 0x52, 0x65, 0x71, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x14, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x73, 0x76, 0x72, 0x2e, 0x52, 0x65, 0x73, 0x53, 0x65, 0x6e, 0x64,
	0x4d, 0x73, 0x67, 0x42, 0x0a, 0x5a, 0x08, 0x70, 0x62, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_stock_proto_rawDescOnce sync.Once
	file_proto_stock_proto_rawDescData = file_proto_stock_proto_rawDesc
)

func file_proto_stock_proto_rawDescGZIP() []byte {
	file_proto_stock_proto_rawDescOnce.Do(func() {
		file_proto_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_stock_proto_rawDescData)
	})
	return file_proto_stock_proto_rawDescData
}

var file_proto_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_proto_stock_proto_goTypes = []interface{}{
	(*ReqStockLocationCreate)(nil),             // 0: stocksvr.ReqStockLocationCreate
	(*ResStockLocationCreate)(nil),             // 1: stocksvr.ResStockLocationCreate
	(*ReqStockLocationUpdate)(nil),             // 2: stocksvr.ReqStockLocationUpdate
	(*ResStockLocationUpdate)(nil),             // 3: stocksvr.ResStockLocationUpdate
	(*ReqStockLocationDelete)(nil),             // 4: stocksvr.ReqStockLocationDelete
	(*ResStockLocationDelete)(nil),             // 5: stocksvr.ResStockLocationDelete
	(*ReqStockLocationList)(nil),               // 6: stocksvr.ReqStockLocationList
	(*ResStockLocationList)(nil),               // 7: stocksvr.ResStockLocationList
	(*StockLocationItem)(nil),                  // 8: stocksvr.StockLocationItem
	(*ReqStockMoveCreate)(nil),                 // 9: stocksvr.ReqStockMoveCreate
	(*ResStockMoveCreate)(nil),                 // 10: stocksvr.ResStockMoveCreate
	(*ReqStockMoveUpdate)(nil),                 // 11: stocksvr.ReqStockMoveUpdate
	(*ResStockMoveUpdate)(nil),                 // 12: stocksvr.ResStockMoveUpdate
	(*ReqStockMoveDelete)(nil),                 // 13: stocksvr.ReqStockMoveDelete
	(*ResStockMoveDelete)(nil),                 // 14: stocksvr.ResStockMoveDelete
	(*ReqStockMoveList)(nil),                   // 15: stocksvr.ReqStockMoveList
	(*ResStockMoveList)(nil),                   // 16: stocksvr.ResStockMoveList
	(*StockMoveItem)(nil),                      // 17: stocksvr.StockMoveItem
	(*ReqStockMoveView)(nil),                   // 18: stocksvr.ReqStockMoveView
	(*ResStockMoveView)(nil),                   // 19: stocksvr.ResStockMoveView
	(*ReqStockMoveBatchCreate)(nil),            // 20: stocksvr.ReqStockMoveBatchCreate
	(*ResStockMoveBatchCreate)(nil),            // 21: stocksvr.ResStockMoveBatchCreate
	(*StockMoveBatchCreateItem)(nil),           // 22: stocksvr.StockMoveBatchCreateItem
	(*ReqStockMoveBatchUpdate)(nil),            // 23: stocksvr.ReqStockMoveBatchUpdate
	(*ResStockMoveBatchUpdate)(nil),            // 24: stocksvr.ResStockMoveBatchUpdate
	(*ReqStockMoveBatchDelete)(nil),            // 25: stocksvr.ReqStockMoveBatchDelete
	(*ResStockMoveBatchDelete)(nil),            // 26: stocksvr.ResStockMoveBatchDelete
	(*ReqStockMoveUpdatePartial)(nil),          // 27: stocksvr.ReqStockMoveUpdatePartial
	(*ResStockMoveUpdatePartial)(nil),          // 28: stocksvr.ResStockMoveUpdatePartial
	(*TenantUpdateAutomatic)(nil),              // 29: stocksvr.TenantUpdateAutomatic
	(*ReqStockMoveUpdateAutomaticPartial)(nil), // 30: stocksvr.ReqStockMoveUpdateAutomaticPartial
	(*ResStockMoveUpdateAutomaticPartial)(nil), // 31: stocksvr.ResStockMoveUpdateAutomaticPartial
	(*ReqSendMsg)(nil),                         // 32: stocksvr.ReqSendMsg
	(*ResSendMsg)(nil),                         // 33: stocksvr.ResSendMsg
}
var file_proto_stock_proto_depIdxs = []int32{
	8,  // 0: stocksvr.ResStockLocationList.items:type_name -> stocksvr.StockLocationItem
	17, // 1: stocksvr.ResStockMoveList.items:type_name -> stocksvr.StockMoveItem
	22, // 2: stocksvr.ReqStockMoveBatchCreate.items:type_name -> stocksvr.StockMoveBatchCreateItem
	29, // 3: stocksvr.ReqStockMoveUpdateAutomaticPartial.item:type_name -> stocksvr.TenantUpdateAutomatic
	0,  // 4: stocksvr.stock.StockLocationCreate:input_type -> stocksvr.ReqStockLocationCreate
	2,  // 5: stocksvr.stock.StockLocationUpdate:input_type -> stocksvr.ReqStockLocationUpdate
	4,  // 6: stocksvr.stock.StockLocationDelete:input_type -> stocksvr.ReqStockLocationDelete
	6,  // 7: stocksvr.stock.StockLocationList:input_type -> stocksvr.ReqStockLocationList
	9,  // 8: stocksvr.stock.StockMoveCreate:input_type -> stocksvr.ReqStockMoveCreate
	11, // 9: stocksvr.stock.StockMoveUpdate:input_type -> stocksvr.ReqStockMoveUpdate
	13, // 10: stocksvr.stock.StockMoveDelete:input_type -> stocksvr.ReqStockMoveDelete
	15, // 11: stocksvr.stock.StockMoveList:input_type -> stocksvr.ReqStockMoveList
	18, // 12: stocksvr.stock.StockMoveView:input_type -> stocksvr.ReqStockMoveView
	20, // 13: stocksvr.stock.StockMoveBatchCreate:input_type -> stocksvr.ReqStockMoveBatchCreate
	23, // 14: stocksvr.stock.StockMoveBatchUpdate:input_type -> stocksvr.ReqStockMoveBatchUpdate
	25, // 15: stocksvr.stock.StockMoveBatchDelete:input_type -> stocksvr.ReqStockMoveBatchDelete
	27, // 16: stocksvr.stock.StockMoveUpdatePartial:input_type -> stocksvr.ReqStockMoveUpdatePartial
	30, // 17: stocksvr.stock.StockMoveUpdateAutomaticPartial:input_type -> stocksvr.ReqStockMoveUpdateAutomaticPartial
	32, // 18: stocksvr.stock.SendMsg:input_type -> stocksvr.ReqSendMsg
	1,  // 19: stocksvr.stock.StockLocationCreate:output_type -> stocksvr.ResStockLocationCreate
	3,  // 20: stocksvr.stock.StockLocationUpdate:output_type -> stocksvr.ResStockLocationUpdate
	5,  // 21: stocksvr.stock.StockLocationDelete:output_type -> stocksvr.ResStockLocationDelete
	7,  // 22: stocksvr.stock.StockLocationList:output_type -> stocksvr.ResStockLocationList
	10, // 23: stocksvr.stock.StockMoveCreate:output_type -> stocksvr.ResStockMoveCreate
	12, // 24: stocksvr.stock.StockMoveUpdate:output_type -> stocksvr.ResStockMoveUpdate
	14, // 25: stocksvr.stock.StockMoveDelete:output_type -> stocksvr.ResStockMoveDelete
	16, // 26: stocksvr.stock.StockMoveList:output_type -> stocksvr.ResStockMoveList
	19, // 27: stocksvr.stock.StockMoveView:output_type -> stocksvr.ResStockMoveView
	21, // 28: stocksvr.stock.StockMoveBatchCreate:output_type -> stocksvr.ResStockMoveBatchCreate
	24, // 29: stocksvr.stock.StockMoveBatchUpdate:output_type -> stocksvr.ResStockMoveBatchUpdate
	26, // 30: stocksvr.stock.StockMoveBatchDelete:output_type -> stocksvr.ResStockMoveBatchDelete
	28, // 31: stocksvr.stock.StockMoveUpdatePartial:output_type -> stocksvr.ResStockMoveUpdatePartial
	31, // 32: stocksvr.stock.StockMoveUpdateAutomaticPartial:output_type -> stocksvr.ResStockMoveUpdateAutomaticPartial
	33, // 33: stocksvr.stock.SendMsg:output_type -> stocksvr.ResSendMsg
	19, // [19:34] is the sub-list for method output_type
	4,  // [4:19] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_proto_stock_proto_init() }
func file_proto_stock_proto_init() {
	if File_proto_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockLocationCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockLocationCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockLocationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockLocationUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockLocationDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockLocationDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockLocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockLocationList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockLocationItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMoveItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveBatchCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveBatchCreate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockMoveBatchCreateItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveBatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveBatchUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveBatchDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveBatchDelete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveUpdatePartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveUpdatePartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TenantUpdateAutomatic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqStockMoveUpdateAutomaticPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResStockMoveUpdateAutomaticPartial); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqSendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_stock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResSendMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_stock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_stock_proto_goTypes,
		DependencyIndexes: file_proto_stock_proto_depIdxs,
		MessageInfos:      file_proto_stock_proto_msgTypes,
	}.Build()
	File_proto_stock_proto = out.File
	file_proto_stock_proto_rawDesc = nil
	file_proto_stock_proto_goTypes = nil
	file_proto_stock_proto_depIdxs = nil
}
